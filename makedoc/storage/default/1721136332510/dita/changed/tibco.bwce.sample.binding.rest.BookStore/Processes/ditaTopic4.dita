<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "/home/makedoc/server/cfg/dtd/concept.dtd">
<concept id="BooksDB.bwp.dita" xml:lang="en-us">
  <title>BooksDB</title>
  <titlealts>
    <navtitle>Processes/tibco/bwce/sample/binding/rest/bookstore/db/BooksDB</navtitle>
  </titlealts>
  <conbody>
    <p>License for TIBCO Software Use Only! </p>
    <p>
      Section contains documentation of changed Process BooksDB (
      <xref href="../../../../../1721117756264/html/index.html?go=projects/tibco.bwce.sample.binding.rest.BookStore/Processes/tibco/bwce/sample/binding/rest/bookstore/db/BooksDB.bwp.html" scope="peer">2024/07/16 08:15</xref>
      , 
      <xref href="../../../../../1721136250430/html/index.html?go=projects/tibco.bwce.sample.binding.rest.BookStore/Processes/tibco/bwce/sample/binding/rest/bookstore/db/BooksDB.bwp.html" scope="peer">2024/07/16 13:24</xref>
      ).
    </p>
    <section>
      <p>
        <note othertype="repositoryAnalyticsAdded" type="other">Added element</note>
        <note othertype="repositoryAnalyticsRemoved" type="other">Deleted element</note>
      </p>
    </section>
  </conbody>
  <concept id="BooksDB.bwp.dita_xmlComp" xml:lang="en-us">
    <title>Changes:</title>
    <titlealts>
      <navtitle>Changes:</navtitle>
    </titlealts>
    <concept id="ProcessMain" xml:lang="en-us">
      <title>BooksDB</title>
      <titlealts>
        <navtitle>Processes/tibco/bwce/sample/binding/rest/bookstore/db/BooksDB</navtitle>
      </titlealts>
      <conbody>
        <p>License for TIBCO Software Use Only! </p>
        <p>
                            Section contains description of Process "
                            BooksDB.bwp
                            " .
                        </p>
      </conbody>
      <concept id="FolderDescription" xml:lang="en-us">
        <title>Folder description:</title>
        <conbody>
          <table>
            <tgroup cols="2">
              <colspec colname="folder" colwidth="75*"/>
              <colspec colname="desc" colwidth="175*"/>
              <thead>
                <row>
                  <entry colname="folder" valign="top">Folder</entry>
                  <entry colname="desc" valign="top">Description</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry> </entry>
                  <entry>No description</entry>
                </row>
              </tbody>
            </tgroup>
          </table>
        </conbody>
      </concept>
      <concept id="ProcessDescription" xml:lang="en-us">
        <title>Process description:</title>
        <conbody>
          <table>
            <tgroup cols="1">
              <tbody>
                <row>
                  <entry>
                                            No description
                                        </entry>
                </row>
              </tbody>
            </tgroup>
          </table>
        </conbody>
      </concept>
      <concept id="ProcessDefinition" xml:lang="en-us">
        <title>Process definition:</title>
        <conbody>
          <p>
                    Full process path:
                    tibco.bwce.sample.binding.rest.bookstore.db.BooksDB</p>
        </conbody>
      </concept>
      <concept id="Diagram" xml:lang="en-us">
        <title>Diagram:</title>
        <conbody/>
      </concept>
      <concept id="Starter" xml:lang="en-us">
        <title>Process starter activity:</title>
        <concept id="OnMessageStart">
          <title>
            Name:
                
            <b>OnMessageStart</b>
          </title>
          <conbody>
            <p>
              <ul>
                <li>Constructor: onMessageStart</li>
                <li>xpdlId: f22acfca-dc29-453e-bd23-246f83c45499</li>
              </ul>
            </p>
          </conbody>
        </concept>
        <concept id="OnMessageStart1">
          <title>
            Name:
                
            <b>OnMessageStart1</b>
          </title>
          <conbody>
            <p>
              <ul>
                <li>Constructor: onMessageStart</li>
                <li>xpdlId: 00c97cfe-9655-4f44-93a2-745d4be182d2</li>
              </ul>
            </p>
          </conbody>
        </concept>
        <concept id="OnMessageStart2">
          <title>
            Name:
                
            <b>OnMessageStart2</b>
          </title>
          <conbody>
            <p>
              <ul>
                <li>Constructor: onMessageStart</li>
                <li>xpdlId: c19c279f-deda-42c4-869d-478fa120d7c5</li>
              </ul>
            </p>
          </conbody>
        </concept>
        <concept id="OnMessageStart3">
          <title>
            Name:
                
            <b>OnMessageStart3</b>
          </title>
          <conbody>
            <p>
              <ul>
                <li>Constructor: onMessageStart</li>
                <li>xpdlId: 86b69e76-0d41-4090-820a-806c417ee981</li>
              </ul>
            </p>
          </conbody>
        </concept>
        <concept id="OnMessageStart4">
          <title>
            Name:
                
            <b>OnMessageStart4</b>
          </title>
          <conbody>
            <p>
              <ul>
                <li>Constructor: onMessageStart</li>
                <li>xpdlId: ca9e2fbf-d1f9-40c2-9571-005a1d445fba</li>
              </ul>
            </p>
          </conbody>
        </concept>
        <concept id="OnMessageStart5">
          <title>
            Name:
                
            <b>OnMessageStart5</b>
          </title>
          <conbody>
            <p>
              <ul>
                <li>Constructor: onMessageStart</li>
                <li>xpdlId: 5ef6d415-d629-4a67-94b4-d7be79167cd4</li>
              </ul>
            </p>
          </conbody>
        </concept>
      </concept>
      <concept id="EndActivity" xml:lang="en-us">
        <title>Process end activity:</title>
        <concept id="OnMessageEnd">
          <title>
            Name:
                
            <b>OnMessageEnd</b>
          </title>
          <conbody>
            <p>
              <ul>
                <li>Constructor: onMessageEnd</li>
                <li>xpdlId: db1e39ef-5906-4d85-9a4d-709261410768</li>
              </ul>
            </p>
          </conbody>
        </concept>
        <concept id="OnMessageEnd1">
          <title>
            Name:
                
            <b>OnMessageEnd1</b>
          </title>
          <conbody>
            <p>
              <ul>
                <li>Constructor: onMessageEnd</li>
                <li>xpdlId: c5fc75f3-6c87-4acc-85aa-5d90dfadc211</li>
              </ul>
            </p>
          </conbody>
        </concept>
        <concept id="OnMessageEnd2">
          <title>
            Name:
                
            <b>OnMessageEnd2</b>
          </title>
          <conbody>
            <p>
              <ul>
                <li>Constructor: onMessageEnd</li>
                <li>xpdlId: ae3fdaad-436f-4bdc-b51a-27af155d73f9</li>
              </ul>
            </p>
          </conbody>
        </concept>
        <concept id="OnMessageEnd3">
          <title>
            Name:
                
            <b>OnMessageEnd3</b>
          </title>
          <conbody>
            <p>
              <ul>
                <li>Constructor: onMessageEnd</li>
                <li>xpdlId: 3fb30e4a-5075-4d14-b238-c63bd23df26b</li>
              </ul>
            </p>
          </conbody>
        </concept>
        <concept id="OnMessageEnd4">
          <title>
            Name:
                
            <b>OnMessageEnd4</b>
          </title>
          <conbody>
            <p>
              <ul>
                <li>Constructor: onMessageEnd</li>
                <li>xpdlId: ca4ffc2c-5358-4a0d-8b6d-a356ead19b95</li>
              </ul>
            </p>
          </conbody>
        </concept>
        <concept id="OnMessageEnd5">
          <title>
            Name:
                
            <b>OnMessageEnd5</b>
          </title>
          <conbody>
            <p>
              <ul>
                <li>Constructor: onMessageEnd</li>
                <li>xpdlId: 0d1c17e9-0170-4d15-aa2c-054c54ff9870</li>
              </ul>
            </p>
          </conbody>
        </concept>
      </concept>
      <concept id="ProcessVariables" xml:lang="en-us">
        <title>Process properties and variables</title>
        <conbody>
          <table>
            <tgroup cols="2">
              <colspec colname="folder" colwidth="75*"/>
              <colspec colname="type" colwidth="75*"/>
              <colspec colname="propertySource" colwidth="165*"/>
              <colspec colname="defaultValue" colwidth="125*"/>
              <thead>
                <row>
                  <entry colname="name" valign="top">Name</entry>
                  <entry colname="type" valign="top">Type</entry>
                  <entry colname="propertySource" valign="top">Property Source</entry>
                  <entry colname="defaultValue" valign="top">Default Value</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry>_processContext</entry>
                  <entry> </entry>
                  <entry> </entry>
                  <entry> </entry>
                </row>
                <row>
                  <entry>addBooks</entry>
                  <entry> </entry>
                  <entry> </entry>
                  <entry> </entry>
                </row>
                <row>
                  <entry>addBooksOut-input</entry>
                  <entry> </entry>
                  <entry> </entry>
                  <entry> </entry>
                </row>
                <row>
                  <entry>getAllBooks</entry>
                  <entry> </entry>
                  <entry> </entry>
                  <entry> </entry>
                </row>
                <row>
                  <entry>getAllBooksOut-input</entry>
                  <entry> </entry>
                  <entry> </entry>
                  <entry> </entry>
                </row>
                <row>
                  <entry>getBookByISBN</entry>
                  <entry> </entry>
                  <entry> </entry>
                  <entry> </entry>
                </row>
                <row>
                  <entry>getBookByISBNOut-input</entry>
                  <entry> </entry>
                  <entry> </entry>
                  <entry> </entry>
                </row>
                <row>
                  <entry>updateBook</entry>
                  <entry> </entry>
                  <entry> </entry>
                  <entry> </entry>
                </row>
                <row>
                  <entry>updateBookOut-input</entry>
                  <entry> </entry>
                  <entry> </entry>
                  <entry> </entry>
                </row>
                <row>
                  <entry>deleteBook</entry>
                  <entry> </entry>
                  <entry> </entry>
                  <entry> </entry>
                </row>
                <row>
                  <entry>deleteBookOut-input</entry>
                  <entry> </entry>
                  <entry> </entry>
                  <entry> </entry>
                </row>
                <row>
                  <entry>getRecentBooks</entry>
                  <entry> </entry>
                  <entry> </entry>
                  <entry> </entry>
                </row>
                <row>
                  <entry>getRecentBooksOut-input</entry>
                  <entry> </entry>
                  <entry> </entry>
                  <entry> </entry>
                </row>
                <row>
                  <entry>addBooks-input</entry>
                  <entry> </entry>
                  <entry> </entry>
                  <entry> </entry>
                </row>
                <row>
                  <entry>addBooks1</entry>
                  <entry> </entry>
                  <entry> </entry>
                  <entry> </entry>
                </row>
                <row>
                  <entry>jdbcProperty</entry>
                  <entry>xsd:string</entry>
                  <entry> </entry>
                  <entry>tibco.bwce.sample.binding.rest.BookStore.JDBCConnectionResource</entry>
                </row>
                <row>
                  <entry>getBooks-input</entry>
                  <entry> </entry>
                  <entry> </entry>
                  <entry> </entry>
                </row>
                <row>
                  <entry>getBooks</entry>
                  <entry> </entry>
                  <entry> </entry>
                  <entry> </entry>
                </row>
                <row>
                  <entry>getBookByISBN-input</entry>
                  <entry> </entry>
                  <entry> </entry>
                  <entry> </entry>
                </row>
                <row>
                  <entry>getBookByISBN1</entry>
                  <entry> </entry>
                  <entry> </entry>
                  <entry> </entry>
                </row>
                <row>
                  <entry>updateBook-input</entry>
                  <entry> </entry>
                  <entry> </entry>
                  <entry> </entry>
                </row>
                <row>
                  <entry>updateBook1</entry>
                  <entry> </entry>
                  <entry> </entry>
                  <entry> </entry>
                </row>
                <row>
                  <entry>JDBCQuery-input</entry>
                  <entry> </entry>
                  <entry> </entry>
                  <entry> </entry>
                </row>
                <row>
                  <entry>JDBCQuery</entry>
                  <entry> </entry>
                  <entry> </entry>
                  <entry> </entry>
                </row>
                <row>
                  <entry>deleteBook-input</entry>
                  <entry> </entry>
                  <entry> </entry>
                  <entry> </entry>
                </row>
                <row>
                  <entry>deleteBook1</entry>
                  <entry> </entry>
                  <entry> </entry>
                  <entry> </entry>
                </row>
                <row>
                  <entry>getRecentBooks-input</entry>
                  <entry> </entry>
                  <entry> </entry>
                  <entry> </entry>
                </row>
                <row>
                  <entry>getRecentBooks1</entry>
                  <entry> </entry>
                  <entry> </entry>
                  <entry> </entry>
                </row>
              </tbody>
            </tgroup>
          </table>
        </conbody>
      </concept>
      <concept id="Activities" xml:lang="en-us">
        <title>Activities:</title>
        <concept id="addBooks">
          <title>
            Name:
                
            <b>addBooks</b>
          </title>
          <conbody>
            <section>
              <ul>
                <li>
                  Description:
                            No description
                  <note othertype="repositoryAnalyticsRemoved" type="other">
                    <table outputclass="repositoryAnalyticsRemoved">
                      <tgroup cols="1">
                        <thead>
                          <row>
                            <entry>Mapping</entry>
                          </row>
                        </thead>
                        <tbody>
                          <row>
                            <entry>
                              <codeblock>
                                <b>
	  tns:jdbcUpdateActivityInput
		 isbn
			xsl:choose
			   xsl:when test="exists($addBooks/parameters/tns2:addBooksRequest/tns1:Book[$index]/tns1:isbn)" = </b>
                                $addBooks/parameters/tns2:addBooksRequest/tns1:Book[$index]/tns1:isbn
                                <b>
			   xsl:otherwise
				  xsl:attribute name="xsi:nil"
		 name
			xsl:choose
			   xsl:when test="exists($addBooks/parameters/tns2:addBooksRequest/tns1:Book[$index]/tns1:name)" = </b>
                                $addBooks/parameters/tns2:addBooksRequest/tns1:Book[$index]/tns1:name
                                <b>
			   xsl:otherwise
				  xsl:attribute name="xsi:nil"
		 description
			xsl:choose
			   xsl:when test="exists($addBooks/parameters/tns2:addBooksRequest/tns1:Book[$index]/tns1:description)" = </b>
                                $addBooks/parameters/tns2:addBooksRequest/tns1:Book[$index]/tns1:description
                                <b>
			   xsl:otherwise
				  xsl:attribute name="xsi:nil"
		 authorName
			xsl:choose
			   xsl:when test="exists($addBooks/parameters/tns2:addBooksRequest/tns1:Book[$index]/tns1:authorName)" = </b>
                                $addBooks/parameters/tns2:addBooksRequest/tns1:Book[$index]/tns1:authorName
                                <b>
			   xsl:otherwise
				  xsl:attribute name="xsi:nil"
		 releaseDate
			xsl:choose
			   xsl:when test="exists($addBooks/parameters/tns2:addBooksRequest/tns1:Book[$index]/tns1:releaseDate)" = </b>
                                $addBooks/parameters/tns2:addBooksRequest/tns1:Book[$index]/tns1:releaseDate
                                <b>
			   xsl:otherwise
				  xsl:attribute name="xsi:nil"
		 vintage
			xsl:choose
			   xsl:when test="exists($addBooks/parameters/tns2:addBooksRequest/tns1:Book[$index]/tns1:vintage)" = </b>
                                $addBooks/parameters/tns2:addBooksRequest/tns1:Book[$index]/tns1:vintage
                                <b>
			   xsl:otherwise
				  xsl:attribute name="xsi:nil"
		 signed
			xsl:choose
			   xsl:when test="exists($addBooks/parameters/tns2:addBooksRequest/tns1:Book[$index]/tns1:signed)" = </b>
                                $addBooks/parameters/tns2:addBooksRequest/tns1:Book[$index]/tns1:signed
                                <b>
			   xsl:otherwise
				  xsl:attribute name="xsi:nil"
		 price
			xsl:choose
			   xsl:when test="exists($addBooks/parameters/tns2:addBooksRequest/tns1:Book[$index]/tns1:price)" = </b>
                                $addBooks/parameters/tns2:addBooksRequest/tns1:Book[$index]/tns1:price
                              </codeblock>
                            </entry>
                          </row>
                        </tbody>
                      </tgroup>
                    </table>
                  </note>
                  <note othertype="repositoryAnalyticsRemoved" type="other">
                    <table outputclass="repositoryAnalyticsRemoved">
                      <tgroup cols="1">
                        <thead>
                          <row>
                            <entry>Mapping</entry>
                          </row>
                        </thead>
                        <tbody>
                          <row>
                            <entry>
                              <codeblock>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:tns="http://www.tibco.com/namespaces/tnt/plugins/jdbc+61f76f17-e519-4c59-a608-07f138a8479a+input" xmlns:tns1="http://www.example.org/Books" xmlns:tns2="http://xmlns.example.com/20140929140236" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="2.0"&gt;
   &lt;xsl:param name="index"/&gt;
   &lt;xsl:param name="addBooks"/&gt;
   &lt;xsl:template name="addBooks-input" match="/"&gt;
      &lt;tns:jdbcUpdateActivityInput&gt;
         &lt;isbn&gt;
            &lt;xsl:choose&gt;
               &lt;xsl:when test="exists($addBooks/parameters/tns2:addBooksRequest/tns1:Book[$index]/tns1:isbn)"&gt;
                  &lt;xsl:value-of select="$addBooks/parameters/tns2:addBooksRequest/tns1:Book[$index]/tns1:isbn"/&gt;
               &lt;/xsl:when&gt;
               &lt;xsl:otherwise&gt;
                  &lt;xsl:attribute name="xsi:nil"&gt;true&lt;/xsl:attribute&gt;
               &lt;/xsl:otherwise&gt;
            &lt;/xsl:choose&gt;
         &lt;/isbn&gt;
         &lt;name&gt;
            &lt;xsl:choose&gt;
               &lt;xsl:when test="exists($addBooks/parameters/tns2:addBooksRequest/tns1:Book[$index]/tns1:name)"&gt;
                  &lt;xsl:value-of select="$addBooks/parameters/tns2:addBooksRequest/tns1:Book[$index]/tns1:name"/&gt;
               &lt;/xsl:when&gt;
               &lt;xsl:otherwise&gt;
                  &lt;xsl:attribute name="xsi:nil"&gt;true&lt;/xsl:attribute&gt;
               &lt;/xsl:otherwise&gt;
            &lt;/xsl:choose&gt;
         &lt;/name&gt;
         &lt;description&gt;
            &lt;xsl:choose&gt;
               &lt;xsl:when test="exists($addBooks/parameters/tns2:addBooksRequest/tns1:Book[$index]/tns1:description)"&gt;
                  &lt;xsl:value-of select="$addBooks/parameters/tns2:addBooksRequest/tns1:Book[$index]/tns1:description"/&gt;
               &lt;/xsl:when&gt;
               &lt;xsl:otherwise&gt;
                  &lt;xsl:attribute name="xsi:nil"&gt;true&lt;/xsl:attribute&gt;
               &lt;/xsl:otherwise&gt;
            &lt;/xsl:choose&gt;
         &lt;/description&gt;
         &lt;authorName&gt;
            &lt;xsl:choose&gt;
               &lt;xsl:when test="exists($addBooks/parameters/tns2:addBooksRequest/tns1:Book[$index]/tns1:authorName)"&gt;
                  &lt;xsl:value-of select="$addBooks/parameters/tns2:addBooksRequest/tns1:Book[$index]/tns1:authorName"/&gt;
               &lt;/xsl:when&gt;
               &lt;xsl:otherwise&gt;
                  &lt;xsl:attribute name="xsi:nil"&gt;true&lt;/xsl:attribute&gt;
               &lt;/xsl:otherwise&gt;
            &lt;/xsl:choose&gt;
         &lt;/authorName&gt;
         &lt;releaseDate&gt;
            &lt;xsl:choose&gt;
               &lt;xsl:when test="exists($addBooks/parameters/tns2:addBooksRequest/tns1:Book[$index]/tns1:releaseDate)"&gt;
                  &lt;xsl:value-of select="$addBooks/parameters/tns2:addBooksRequest/tns1:Book[$index]/tns1:releaseDate"/&gt;
               &lt;/xsl:when&gt;
               &lt;xsl:otherwise&gt;
                  &lt;xsl:attribute name="xsi:nil"&gt;true&lt;/xsl:attribute&gt;
               &lt;/xsl:otherwise&gt;
            &lt;/xsl:choose&gt;
         &lt;/releaseDate&gt;
         &lt;vintage&gt;
            &lt;xsl:choose&gt;
               &lt;xsl:when test="exists($addBooks/parameters/tns2:addBooksRequest/tns1:Book[$index]/tns1:vintage)"&gt;
                  &lt;xsl:value-of select="$addBooks/parameters/tns2:addBooksRequest/tns1:Book[$index]/tns1:vintage"/&gt;
               &lt;/xsl:when&gt;
               &lt;xsl:otherwise&gt;
                  &lt;xsl:attribute name="xsi:nil"&gt;true&lt;/xsl:attribute&gt;
               &lt;/xsl:otherwise&gt;
            &lt;/xsl:choose&gt;
         &lt;/vintage&gt;
         &lt;signed&gt;
            &lt;xsl:choose&gt;
               &lt;xsl:when test="exists($addBooks/parameters/tns2:addBooksRequest/tns1:Book[$index]/tns1:signed)"&gt;
                  &lt;xsl:value-of select="$addBooks/parameters/tns2:addBooksRequest/tns1:Book[$index]/tns1:signed"/&gt;
               &lt;/xsl:when&gt;
               &lt;xsl:otherwise&gt;
                  &lt;xsl:attribute name="xsi:nil"&gt;true&lt;/xsl:attribute&gt;
               &lt;/xsl:otherwise&gt;
            &lt;/xsl:choose&gt;
         &lt;/signed&gt;
         &lt;price&gt;
            &lt;xsl:choose&gt;
               &lt;xsl:when test="exists($addBooks/parameters/tns2:addBooksRequest/tns1:Book[$index]/tns1:price)"&gt;
                  &lt;xsl:value-of select="$addBooks/parameters/tns2:addBooksRequest/tns1:Book[$index]/tns1:price"/&gt;
               &lt;/xsl:when&gt;
               &lt;xsl:otherwise&gt;
                  &lt;xsl:attribute name="xsi:nil"&gt;true&lt;/xsl:attribute&gt;
               &lt;/xsl:otherwise&gt;
            &lt;/xsl:choose&gt;
         &lt;/price&gt;
      &lt;/tns:jdbcUpdateActivityInput&gt;
   &lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;
</codeblock>
                            </entry>
                          </row>
                        </tbody>
                      </tgroup>
                    </table>
                  </note>
                </li>
                <li>Type: bw.jdbc.update</li>
                <li>JDBC Shared Resource: jdbcProperty</li>
                <li>Timeout (sec): 10</li>
                <li>Statement: INSERT INTO "public"."books" ("isbn", "name", "description", "authorName",
  "releaseDate", "vintage", "signed", "price")
  VALUES (?, ?, ?, ?, ?, ?, ?, ?)</li>
                <li>
                  Parameters:
                    
                  <p>No parameters</p>
                </li>
                <li>Thread Pool Shared Resource: </li>
                <li>Insert if record doesn't exist: false</li>
                <li>Override Transaction Behavior: false</li>
                <li>Interpret Empty String As Null: false</li>
                <li>Results Use Schema: false</li>
                <li>Batch Update: false</li>
                <li>Input Variable:
                                addBooks-input</li>
                <li>Output Variable:
                                addBooks1</li>
                <li>
                  Input bindings:
                  <ul outputclass="mappings">
                    <li outputclass="table">
                      <lines outputclass="caption">Mapping table</lines>
                      <table outputclass="data">
                        <tgroup cols="2">
                          <thead>
                            <row>
                              <entry>Target</entry>
                              <entry>Source</entry>
                            </row>
                          </thead>
                          <tbody>
                            <row>
                              <entry>
                                <b>/tns:jdbcUpdateActivityInput</b>
                                <b>/isbn</b>
                                /[CHOOSE]/[WHEN]  exists($addBooks/parameters/tns2:addBooksRequest/tns1:Book[$index]/tns1:isbn) 
                              </entry>
                              <entry>$addBooks/parameters/tns2:addBooksRequest/tns1:Book[$index]/tns1:isbn</entry>
                            </row>
                            <row>
                              <entry>
                                <b>/tns:jdbcUpdateActivityInput</b>
                                <b>/name</b>
                                /[CHOOSE]/[WHEN]  exists($addBooks/parameters/tns2:addBooksRequest/tns1:Book[$index]/tns1:name) 
                              </entry>
                              <entry>$addBooks/parameters/tns2:addBooksRequest/tns1:Book[$index]/tns1:name</entry>
                            </row>
                            <row>
                              <entry>
                                <b>/tns:jdbcUpdateActivityInput</b>
                                <b>/description</b>
                                /[CHOOSE]/[WHEN]  exists($addBooks/parameters/tns2:addBooksRequest/tns1:Book[$index]/tns1:description) 
                              </entry>
                              <entry>$addBooks/parameters/tns2:addBooksRequest/tns1:Book[$index]/tns1:description</entry>
                            </row>
                            <row>
                              <entry>
                                <b>/tns:jdbcUpdateActivityInput</b>
                                <b>/authorName</b>
                                /[CHOOSE]/[WHEN]  exists($addBooks/parameters/tns2:addBooksRequest/tns1:Book[$index]/tns1:authorName) 
                              </entry>
                              <entry>$addBooks/parameters/tns2:addBooksRequest/tns1:Book[$index]/tns1:authorName</entry>
                            </row>
                            <row>
                              <entry>
                                <b>/tns:jdbcUpdateActivityInput</b>
                                <b>/releaseDate</b>
                                /[CHOOSE]/[WHEN]  exists($addBooks/parameters/tns2:addBooksRequest/tns1:Book[$index]/tns1:releaseDate) 
                              </entry>
                              <entry>$addBooks/parameters/tns2:addBooksRequest/tns1:Book[$index]/tns1:releaseDate</entry>
                            </row>
                            <row>
                              <entry>
                                <b>/tns:jdbcUpdateActivityInput</b>
                                <b>/vintage</b>
                                /[CHOOSE]/[WHEN]  exists($addBooks/parameters/tns2:addBooksRequest/tns1:Book[$index]/tns1:vintage) 
                              </entry>
                              <entry>$addBooks/parameters/tns2:addBooksRequest/tns1:Book[$index]/tns1:vintage</entry>
                            </row>
                            <row>
                              <entry>
                                <b>/tns:jdbcUpdateActivityInput</b>
                                <b>/signed</b>
                                /[CHOOSE]/[WHEN]  exists($addBooks/parameters/tns2:addBooksRequest/tns1:Book[$index]/tns1:signed) 
                              </entry>
                              <entry>$addBooks/parameters/tns2:addBooksRequest/tns1:Book[$index]/tns1:signed</entry>
                            </row>
                            <row>
                              <entry>
                                <b>/tns:jdbcUpdateActivityInput</b>
                                <b>/price</b>
                                /[CHOOSE]/[WHEN]  exists($addBooks/parameters/tns2:addBooksRequest/tns1:Book[$index]/tns1:price) 
                              </entry>
                              <entry>$addBooks/parameters/tns2:addBooksRequest/tns1:Book[$index]/tns1:price</entry>
                            </row>
                          </tbody>
                        </tgroup>
                      </table>
                    </li>
                    <li outputclass="tree">
                      <lines outputclass="caption">Mapping tree</lines>
                      <note othertype="repositoryAnalyticsAdded" type="other">
                        <codeblock>
                          <b>
	  tns:jdbcUpdateActivityInput
		 isbn
			xsl:choose
			   xsl:when test="exists($addBooks/parameters/tns2:addBooksRequest/tns1:Book[$index]/tns1:isbn)" = </b>
                          $addBooks/parameters/tns2:addBooksRequest/tns1:Book[$index]/tns1:isbn
                          <b>
			   xsl:otherwise
				  xsl:attribute name="xsi:nil"
		 name
			xsl:choose
			   xsl:when test="exists($addBooks/parameters/tns2:addBooksRequest/tns1:Book[$index]/tns1:name)" = </b>
                          $addBooks/parameters/tns2:addBooksRequest/tns1:Book[$index]/tns1:name
                          <b>
			   xsl:otherwise
				  xsl:attribute name="xsi:nil"
		 description
			xsl:choose
			   xsl:when test="exists($addBooks/parameters/tns2:addBooksRequest/tns1:Book[$index]/tns1:description)" = </b>
                          $addBooks/parameters/tns2:addBooksRequest/tns1:Book[$index]/tns1:description
                          <b>
			   xsl:otherwise
				  xsl:attribute name="xsi:nil"
		 authorName
			xsl:choose
			   xsl:when test="exists($addBooks/parameters/tns2:addBooksRequest/tns1:Book[$index]/tns1:authorName)" = </b>
                          $addBooks/parameters/tns2:addBooksRequest/tns1:Book[$index]/tns1:authorName
                          <b>
			   xsl:otherwise
				  xsl:attribute name="xsi:nil"
		 releaseDate
			xsl:choose
			   xsl:when test="exists($addBooks/parameters/tns2:addBooksRequest/tns1:Book[$index]/tns1:releaseDate)" = </b>
                          $addBooks/parameters/tns2:addBooksRequest/tns1:Book[$index]/tns1:releaseDate
                          <b>
			   xsl:otherwise
				  xsl:attribute name="xsi:nil"
		 vintage
			xsl:choose
			   xsl:when test="exists($addBooks/parameters/tns2:addBooksRequest/tns1:Book[$index]/tns1:vintage)" = </b>
                          $addBooks/parameters/tns2:addBooksRequest/tns1:Book[$index]/tns1:vintage
                          <b>
			   xsl:otherwise
				  xsl:attribute name="xsi:nil"
		 signed
			xsl:choose
			   xsl:when test="exists($addBooks/parameters/tns2:addBooksRequest/tns1:Book[$index]/tns1:signed)" = </b>
                          $addBooks/parameters/tns2:addBooksRequest/tns1:Book[$index]/tns1:signed
                          <b>
			   xsl:otherwise
				  xsl:attribute name="xsi:nil"
		 price
			xsl:choose
			   xsl:when test="exists($addBooks/parameters/tns2:addBooksRequest/tns1:Book[$index]/tns1:price)" = </b>
                          $addBooks/parameters/tns2:addBooksRequest/tns1:Book[$index]/tns1:price
                        </codeblock>
                      </note>
                    </li>
                    <li outputclass="raw">
                      <lines outputclass="caption">Source code</lines>
                      <note othertype="repositoryAnalyticsAdded" type="other">
                        <codeblock>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:tns="http://www.tibco.com/namespaces/tnt/plugins/jdbc+61f76f17-e519-4c59-a608-07f138a8479a+input" xmlns:tns1="http://www.example.org/Books" xmlns:tns2="http://xmlns.example.com/20140929140236" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="2.0"&gt;
   &lt;xsl:param name="index"/&gt;
   &lt;xsl:param name="addBooks"/&gt;
   &lt;xsl:template name="addBooks-input" match="/"&gt;
      &lt;tns:jdbcUpdateActivityInput&gt;
         &lt;isbn&gt;
            &lt;xsl:choose&gt;
               &lt;xsl:when test="exists($addBooks/parameters/tns2:addBooksRequest/tns1:Book[$index]/tns1:isbn)"&gt;
                  &lt;xsl:value-of select="$addBooks/parameters/tns2:addBooksRequest/tns1:Book[$index]/tns1:isbn"/&gt;
               &lt;/xsl:when&gt;
               &lt;xsl:otherwise&gt;
                  &lt;xsl:attribute name="xsi:nil"&gt;true&lt;/xsl:attribute&gt;
               &lt;/xsl:otherwise&gt;
            &lt;/xsl:choose&gt;
         &lt;/isbn&gt;
         &lt;name&gt;
            &lt;xsl:choose&gt;
               &lt;xsl:when test="exists($addBooks/parameters/tns2:addBooksRequest/tns1:Book[$index]/tns1:name)"&gt;
                  &lt;xsl:value-of select="$addBooks/parameters/tns2:addBooksRequest/tns1:Book[$index]/tns1:name"/&gt;
               &lt;/xsl:when&gt;
               &lt;xsl:otherwise&gt;
                  &lt;xsl:attribute name="xsi:nil"&gt;true&lt;/xsl:attribute&gt;
               &lt;/xsl:otherwise&gt;
            &lt;/xsl:choose&gt;
         &lt;/name&gt;
         &lt;description&gt;
            &lt;xsl:choose&gt;
               &lt;xsl:when test="exists($addBooks/parameters/tns2:addBooksRequest/tns1:Book[$index]/tns1:description)"&gt;
                  &lt;xsl:value-of select="$addBooks/parameters/tns2:addBooksRequest/tns1:Book[$index]/tns1:description"/&gt;
               &lt;/xsl:when&gt;
               &lt;xsl:otherwise&gt;
                  &lt;xsl:attribute name="xsi:nil"&gt;true&lt;/xsl:attribute&gt;
               &lt;/xsl:otherwise&gt;
            &lt;/xsl:choose&gt;
         &lt;/description&gt;
         &lt;authorName&gt;
            &lt;xsl:choose&gt;
               &lt;xsl:when test="exists($addBooks/parameters/tns2:addBooksRequest/tns1:Book[$index]/tns1:authorName)"&gt;
                  &lt;xsl:value-of select="$addBooks/parameters/tns2:addBooksRequest/tns1:Book[$index]/tns1:authorName"/&gt;
               &lt;/xsl:when&gt;
               &lt;xsl:otherwise&gt;
                  &lt;xsl:attribute name="xsi:nil"&gt;true&lt;/xsl:attribute&gt;
               &lt;/xsl:otherwise&gt;
            &lt;/xsl:choose&gt;
         &lt;/authorName&gt;
         &lt;releaseDate&gt;
            &lt;xsl:choose&gt;
               &lt;xsl:when test="exists($addBooks/parameters/tns2:addBooksRequest/tns1:Book[$index]/tns1:releaseDate)"&gt;
                  &lt;xsl:value-of select="$addBooks/parameters/tns2:addBooksRequest/tns1:Book[$index]/tns1:releaseDate"/&gt;
               &lt;/xsl:when&gt;
               &lt;xsl:otherwise&gt;
                  &lt;xsl:attribute name="xsi:nil"&gt;true&lt;/xsl:attribute&gt;
               &lt;/xsl:otherwise&gt;
            &lt;/xsl:choose&gt;
         &lt;/releaseDate&gt;
         &lt;vintage&gt;
            &lt;xsl:choose&gt;
               &lt;xsl:when test="exists($addBooks/parameters/tns2:addBooksRequest/tns1:Book[$index]/tns1:vintage)"&gt;
                  &lt;xsl:value-of select="$addBooks/parameters/tns2:addBooksRequest/tns1:Book[$index]/tns1:vintage"/&gt;
               &lt;/xsl:when&gt;
               &lt;xsl:otherwise&gt;
                  &lt;xsl:attribute name="xsi:nil"&gt;true&lt;/xsl:attribute&gt;
               &lt;/xsl:otherwise&gt;
            &lt;/xsl:choose&gt;
         &lt;/vintage&gt;
         &lt;signed&gt;
            &lt;xsl:choose&gt;
               &lt;xsl:when test="exists($addBooks/parameters/tns2:addBooksRequest/tns1:Book[$index]/tns1:signed)"&gt;
                  &lt;xsl:value-of select="$addBooks/parameters/tns2:addBooksRequest/tns1:Book[$index]/tns1:signed"/&gt;
               &lt;/xsl:when&gt;
               &lt;xsl:otherwise&gt;
                  &lt;xsl:attribute name="xsi:nil"&gt;true&lt;/xsl:attribute&gt;
               &lt;/xsl:otherwise&gt;
            &lt;/xsl:choose&gt;
         &lt;/signed&gt;
         &lt;price&gt;
            &lt;xsl:choose&gt;
               &lt;xsl:when test="exists($addBooks/parameters/tns2:addBooksRequest/tns1:Book[$index]/tns1:price)"&gt;
                  &lt;xsl:value-of select="$addBooks/parameters/tns2:addBooksRequest/tns1:Book[$index]/tns1:price"/&gt;
               &lt;/xsl:when&gt;
               &lt;xsl:otherwise&gt;
                  &lt;xsl:attribute name="xsi:nil"&gt;true&lt;/xsl:attribute&gt;
               &lt;/xsl:otherwise&gt;
            &lt;/xsl:choose&gt;
         &lt;/price&gt;
      &lt;/tns:jdbcUpdateActivityInput&gt;
   &lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;
</codeblock>
                      </note>
                    </li>
                  </ul>
                </li>
              </ul>
            </section>
          </conbody>
        </concept>
        <concept id="addBooksOut">
          <title>
            Name:
                
            <b>addBooksOut</b>
          </title>
          <conbody>
            <p>
              <ul>
                <li>
                  Service: BooksPersist / operation: addBooks
                  <note othertype="repositoryAnalyticsRemoved" type="other">
                    <table outputclass="repositoryAnalyticsRemoved">
                      <tgroup cols="1">
                        <thead>
                          <row>
                            <entry>Mapping</entry>
                          </row>
                        </thead>
                        <tbody>
                          <row>
                            <entry>
                              <codeblock>
                                <b> = </b>
                              </codeblock>
                            </entry>
                          </row>
                        </tbody>
                      </tgroup>
                    </table>
                  </note>
                  <note othertype="repositoryAnalyticsRemoved" type="other">
                    <table outputclass="repositoryAnalyticsRemoved">
                      <tgroup cols="1">
                        <thead>
                          <row>
                            <entry>Mapping</entry>
                          </row>
                        </thead>
                        <tbody>
                          <row>
                            <entry>
                              <codeblock>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:tns="http://xmlns.example.com/20140929140236" xmlns:tns1="http://www.example.org/Books" version="2.0"&gt;
   &lt;xsl:param name="addBooks"/&gt;
   &lt;xsl:template name="addBooksOut-input" match="/"&gt;
      &lt;tns:addBooksResponse&gt;
         &lt;parameters&gt;
            &lt;tns1:Books&gt;
               &lt;xsl:copy-of select="$addBooks/parameters/tns:addBooksRequest/tns1:Book"/&gt;
            &lt;/tns1:Books&gt;
         &lt;/parameters&gt;
      &lt;/tns:addBooksResponse&gt;
   &lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;
</codeblock>
                            </entry>
                          </row>
                        </tbody>
                      </tgroup>
                    </table>
                  </note>
                </li>
                <li>ReplyWith: Output Message</li>
                <li>Description: </li>
                <li>
                  Input bindings:
                  <ul outputclass="mappings">
                    <li outputclass="table">
                      <lines outputclass="caption">Mapping table</lines>
                      <table outputclass="data">
                        <tgroup cols="2">
                          <thead>
                            <row>
                              <entry>Target</entry>
                              <entry>Source</entry>
                            </row>
                          </thead>
                          <tbody>
                            <row>
                              <entry>
                                <b>/tns:addBooksResponse</b>
                                <b>/parameters</b>
                                <b>/tns1:Books</b>
                              </entry>
                              <entry>/[COPY-OF]  $addBooks/parameters/tns:addBooksRequest/tns1:Book </entry>
                            </row>
                          </tbody>
                        </tgroup>
                      </table>
                    </li>
                    <li outputclass="tree">
                      <lines outputclass="caption">Mapping tree</lines>
                      <note othertype="repositoryAnalyticsAdded" type="other">
                        <codeblock>
                          <b> = </b>
                        </codeblock>
                      </note>
                    </li>
                    <li outputclass="raw">
                      <lines outputclass="caption">Source code</lines>
                      <note othertype="repositoryAnalyticsAdded" type="other">
                        <codeblock>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:tns="http://xmlns.example.com/20140929140236" xmlns:tns1="http://www.example.org/Books" version="2.0"&gt;
   &lt;xsl:param name="addBooks"/&gt;
   &lt;xsl:template name="addBooksOut-input" match="/"&gt;
      &lt;tns:addBooksResponse&gt;
         &lt;parameters&gt;
            &lt;tns1:Books&gt;
               &lt;xsl:copy-of select="$addBooks/parameters/tns:addBooksRequest/tns1:Book"/&gt;
            &lt;/tns1:Books&gt;
         &lt;/parameters&gt;
      &lt;/tns:addBooksResponse&gt;
   &lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;
</codeblock>
                      </note>
                    </li>
                  </ul>
                </li>
              </ul>
            </p>
          </conbody>
        </concept>
        <concept id="Assign">
          <title>
            Name:
                
            <b>Assign</b>
          </title>
          <conbody>
            <section>
              <ul>
                <li>Description:
                            No description</li>
                <li>Type: bw.generalactivities.bwassign</li>
                <li>Process Variable to Set: BookCnt</li>
                <li>Input Variable:
                                BookCnt</li>
                <li>Output Variable:
                                BookCnt</li>
                <li>Input bindings:
                                    Incomplete mapping
                                </li>
              </ul>
            </section>
          </conbody>
        </concept>
        <concept id="deleteBook">
          <title>
            Name:
                
            <b>deleteBook</b>
          </title>
          <conbody>
            <section>
              <ul>
                <li>
                  Description:
                            No description
                  <note othertype="repositoryAnalyticsRemoved" type="other">
                    <table outputclass="repositoryAnalyticsRemoved">
                      <tgroup cols="1">
                        <thead>
                          <row>
                            <entry>Mapping</entry>
                          </row>
                        </thead>
                        <tbody>
                          <row>
                            <entry>
                              <codeblock>
                                <b>
	  tns:jdbcUpdateActivityInput
		 isbn = </b>
                                $deleteBook/parameters/tns1:deleteBookRequest/ISBN
                              </codeblock>
                            </entry>
                          </row>
                        </tbody>
                      </tgroup>
                    </table>
                  </note>
                  <note othertype="repositoryAnalyticsRemoved" type="other">
                    <table outputclass="repositoryAnalyticsRemoved">
                      <tgroup cols="1">
                        <thead>
                          <row>
                            <entry>Mapping</entry>
                          </row>
                        </thead>
                        <tbody>
                          <row>
                            <entry>
                              <codeblock>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:tns="http://www.tibco.com/namespaces/tnt/plugins/jdbc+f4f28f1b-79dd-418b-a8c7-138a8f8e8e89+input" xmlns:tns1="http://xmlns.example.com/20140929140236" version="2.0"&gt;
   &lt;xsl:param name="deleteBook"/&gt;
   &lt;xsl:template name="deleteBook-input" match="/"&gt;
      &lt;tns:jdbcUpdateActivityInput&gt;
         &lt;isbn&gt;
            &lt;xsl:value-of select="$deleteBook/parameters/tns1:deleteBookRequest/ISBN"/&gt;
         &lt;/isbn&gt;
      &lt;/tns:jdbcUpdateActivityInput&gt;
   &lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;
</codeblock>
                            </entry>
                          </row>
                        </tbody>
                      </tgroup>
                    </table>
                  </note>
                </li>
                <li>Type: bw.jdbc.update</li>
                <li>JDBC Shared Resource: jdbcProperty</li>
                <li>Timeout (sec): 10</li>
                <li>Statement: DELETE FROM "public"."books"
 WHERE "isbn" = ?</li>
                <li>
                  Parameters:
                    
                  <p>No parameters</p>
                </li>
                <li>Thread Pool Shared Resource: </li>
                <li>Insert if record doesn't exist: false</li>
                <li>Override Transaction Behavior: false</li>
                <li>Interpret Empty String As Null: false</li>
                <li>Results Use Schema: false</li>
                <li>Batch Update: false</li>
                <li>Input Variable:
                                deleteBook-input</li>
                <li>Output Variable:
                                deleteBook1</li>
                <li>
                  Input bindings:
                  <ul outputclass="mappings">
                    <li outputclass="table">
                      <lines outputclass="caption">Mapping table</lines>
                      <table outputclass="data">
                        <tgroup cols="2">
                          <thead>
                            <row>
                              <entry>Target</entry>
                              <entry>Source</entry>
                            </row>
                          </thead>
                          <tbody>
                            <row>
                              <entry>
                                <b>/tns:jdbcUpdateActivityInput</b>
                                <b>/isbn</b>
                              </entry>
                              <entry>$deleteBook/parameters/tns1:deleteBookRequest/ISBN</entry>
                            </row>
                          </tbody>
                        </tgroup>
                      </table>
                    </li>
                    <li outputclass="tree">
                      <lines outputclass="caption">Mapping tree</lines>
                      <note othertype="repositoryAnalyticsAdded" type="other">
                        <codeblock>
                          <b>
	  tns:jdbcUpdateActivityInput
		 isbn = </b>
                          $deleteBook/parameters/tns1:deleteBookRequest/ISBN
                        </codeblock>
                      </note>
                    </li>
                    <li outputclass="raw">
                      <lines outputclass="caption">Source code</lines>
                      <note othertype="repositoryAnalyticsAdded" type="other">
                        <codeblock>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:tns="http://www.tibco.com/namespaces/tnt/plugins/jdbc+f4f28f1b-79dd-418b-a8c7-138a8f8e8e89+input" xmlns:tns1="http://xmlns.example.com/20140929140236" version="2.0"&gt;
   &lt;xsl:param name="deleteBook"/&gt;
   &lt;xsl:template name="deleteBook-input" match="/"&gt;
      &lt;tns:jdbcUpdateActivityInput&gt;
         &lt;isbn&gt;
            &lt;xsl:value-of select="$deleteBook/parameters/tns1:deleteBookRequest/ISBN"/&gt;
         &lt;/isbn&gt;
      &lt;/tns:jdbcUpdateActivityInput&gt;
   &lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;
</codeblock>
                      </note>
                    </li>
                  </ul>
                </li>
              </ul>
            </section>
          </conbody>
        </concept>
        <concept id="deleteBookOut">
          <title>
            Name:
                
            <b>deleteBookOut</b>
          </title>
          <conbody>
            <p>
              <ul>
                <li>
                  Service: BooksPersist / operation: deleteBook
                  <note othertype="repositoryAnalyticsRemoved" type="other">
                    <table outputclass="repositoryAnalyticsRemoved">
                      <tgroup cols="1">
                        <thead>
                          <row>
                            <entry>Mapping</entry>
                          </row>
                        </thead>
                        <tbody>
                          <row>
                            <entry>
                              <codeblock>
                                <b>
	  tns:deleteBookResponse
		 parameters
			tns:deleteBookResponse
			   out = </b>
                                concat(&amp;quot;Deleted book with ISBN - &amp;quot;,$deleteBook/parameters/tns:deleteBookRequest/ISBN)
                              </codeblock>
                            </entry>
                          </row>
                        </tbody>
                      </tgroup>
                    </table>
                  </note>
                  <note othertype="repositoryAnalyticsRemoved" type="other">
                    <table outputclass="repositoryAnalyticsRemoved">
                      <tgroup cols="1">
                        <thead>
                          <row>
                            <entry>Mapping</entry>
                          </row>
                        </thead>
                        <tbody>
                          <row>
                            <entry>
                              <codeblock>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:tns="http://xmlns.example.com/20140929140236" version="2.0"&gt;
   &lt;xsl:param name="deleteBook"/&gt;
   &lt;xsl:template name="deleteBookOut-input" match="/"&gt;
      &lt;tns:deleteBookResponse&gt;
         &lt;parameters&gt;
            &lt;tns:deleteBookResponse&gt;
               &lt;out&gt;
                  &lt;xsl:value-of select="concat(&amp;quot;Deleted book with ISBN - &amp;quot;,$deleteBook/parameters/tns:deleteBookRequest/ISBN)"/&gt;
               &lt;/out&gt;
            &lt;/tns:deleteBookResponse&gt;
         &lt;/parameters&gt;
      &lt;/tns:deleteBookResponse&gt;
   &lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;
</codeblock>
                            </entry>
                          </row>
                        </tbody>
                      </tgroup>
                    </table>
                  </note>
                </li>
                <li>ReplyWith: Output Message</li>
                <li>Description: </li>
                <li>
                  Input bindings:
                  <ul outputclass="mappings">
                    <li outputclass="table">
                      <lines outputclass="caption">Mapping table</lines>
                      <table outputclass="data">
                        <tgroup cols="2">
                          <thead>
                            <row>
                              <entry>Target</entry>
                              <entry>Source</entry>
                            </row>
                          </thead>
                          <tbody>
                            <row>
                              <entry>
                                <b>/tns:deleteBookResponse</b>
                                <b>/parameters</b>
                                <b>/tns:deleteBookResponse</b>
                                <b>/out</b>
                              </entry>
                              <entry>concat("Deleted book with ISBN - ",$deleteBook/parameters/tns:deleteBookRequest/ISBN)</entry>
                            </row>
                          </tbody>
                        </tgroup>
                      </table>
                    </li>
                    <li outputclass="tree">
                      <lines outputclass="caption">Mapping tree</lines>
                      <note othertype="repositoryAnalyticsAdded" type="other">
                        <codeblock>
                          <b>
	  tns:deleteBookResponse
		 parameters
			tns:deleteBookResponse
			   out = </b>
                          concat(&amp;quot;Deleted book with ISBN - &amp;quot;,$deleteBook/parameters/tns:deleteBookRequest/ISBN)
                        </codeblock>
                      </note>
                    </li>
                    <li outputclass="raw">
                      <lines outputclass="caption">Source code</lines>
                      <note othertype="repositoryAnalyticsAdded" type="other">
                        <codeblock>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:tns="http://xmlns.example.com/20140929140236" version="2.0"&gt;
   &lt;xsl:param name="deleteBook"/&gt;
   &lt;xsl:template name="deleteBookOut-input" match="/"&gt;
      &lt;tns:deleteBookResponse&gt;
         &lt;parameters&gt;
            &lt;tns:deleteBookResponse&gt;
               &lt;out&gt;
                  &lt;xsl:value-of select="concat(&amp;quot;Deleted book with ISBN - &amp;quot;,$deleteBook/parameters/tns:deleteBookRequest/ISBN)"/&gt;
               &lt;/out&gt;
            &lt;/tns:deleteBookResponse&gt;
         &lt;/parameters&gt;
      &lt;/tns:deleteBookResponse&gt;
   &lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;
</codeblock>
                      </note>
                    </li>
                  </ul>
                </li>
              </ul>
            </p>
          </conbody>
        </concept>
        <concept id="getAllBooksOut">
          <title>
            Name:
                
            <b>getAllBooksOut</b>
          </title>
          <conbody>
            <p>
              <ul>
                <li>
                  Service: BooksPersist / operation: getAllBooks
                  <note othertype="repositoryAnalyticsRemoved" type="other">
                    <table outputclass="repositoryAnalyticsRemoved">
                      <tgroup cols="1">
                        <thead>
                          <row>
                            <entry>Mapping</entry>
                          </row>
                        </thead>
                        <tbody>
                          <row>
                            <entry>
                              <codeblock>
                                <b>
	  tns:getAllBooksResponse
		 parameters
			tns1:Books
			   xsl:for-each select="$getBooks/Record"
				  tns1:Book
					 xsl:if test="isbn"
						tns1:isbn = </b>
                                isbn
                                <b>
					 xsl:if test="name"
						tns1:name = </b>
                                name
                                <b>
					 xsl:if test="description"
						tns1:description = </b>
                                description
                                <b>
					 xsl:if test="authorName"
						tns1:authorName = </b>
                                authorName
                                <b>
					 xsl:if test="releaseDate"
						tns1:releaseDate = </b>
                                releaseDate
                                <b>
					 xsl:if test="vintage"
						tns1:vintage = </b>
                                vintage
                                <b>
					 xsl:if test="signed"
						tns1:signed = </b>
                                signed
                                <b>
					 tns1:price = </b>
                                xsd:float(price)
                              </codeblock>
                            </entry>
                          </row>
                        </tbody>
                      </tgroup>
                    </table>
                  </note>
                  <note othertype="repositoryAnalyticsRemoved" type="other">
                    <table outputclass="repositoryAnalyticsRemoved">
                      <tgroup cols="1">
                        <thead>
                          <row>
                            <entry>Mapping</entry>
                          </row>
                        </thead>
                        <tbody>
                          <row>
                            <entry>
                              <codeblock>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:tns="http://xmlns.example.com/20140929140236" xmlns:tns1="http://www.example.org/Books" xmlns:xsd="http://www.w3.org/2001/XMLSchema" version="2.0"&gt;
   &lt;xsl:param name="getBooks"/&gt;
   &lt;xsl:template name="getAllBooksOut-input" match="/"&gt;
      &lt;tns:getAllBooksResponse&gt;
         &lt;parameters&gt;
            &lt;tns1:Books&gt;
               &lt;xsl:for-each select="$getBooks/Record"&gt;
                  &lt;tns1:Book&gt;
                     &lt;xsl:if test="isbn"&gt;
                        &lt;tns1:isbn&gt;
                           &lt;xsl:value-of select="isbn"/&gt;
                        &lt;/tns1:isbn&gt;
                     &lt;/xsl:if&gt;
                     &lt;xsl:if test="name"&gt;
                        &lt;tns1:name&gt;
                           &lt;xsl:value-of select="name"/&gt;
                        &lt;/tns1:name&gt;
                     &lt;/xsl:if&gt;
                     &lt;xsl:if test="description"&gt;
                        &lt;tns1:description&gt;
                           &lt;xsl:value-of select="description"/&gt;
                        &lt;/tns1:description&gt;
                     &lt;/xsl:if&gt;
                     &lt;xsl:if test="authorName"&gt;
                        &lt;tns1:authorName&gt;
                           &lt;xsl:value-of select="authorName"/&gt;
                        &lt;/tns1:authorName&gt;
                     &lt;/xsl:if&gt;
                     &lt;xsl:if test="releaseDate"&gt;
                        &lt;tns1:releaseDate&gt;
                           &lt;xsl:value-of select="releaseDate"/&gt;
                        &lt;/tns1:releaseDate&gt;
                     &lt;/xsl:if&gt;
                     &lt;xsl:if test="vintage"&gt;
                        &lt;tns1:vintage&gt;
                           &lt;xsl:value-of select="vintage"/&gt;
                        &lt;/tns1:vintage&gt;
                     &lt;/xsl:if&gt;
                     &lt;xsl:if test="signed"&gt;
                        &lt;tns1:signed&gt;
                           &lt;xsl:value-of select="signed"/&gt;
                        &lt;/tns1:signed&gt;
                     &lt;/xsl:if&gt;
                     &lt;tns1:price&gt;
                        &lt;xsl:value-of select="xsd:float(price)"/&gt;
                     &lt;/tns1:price&gt;
                  &lt;/tns1:Book&gt;
               &lt;/xsl:for-each&gt;
            &lt;/tns1:Books&gt;
         &lt;/parameters&gt;
      &lt;/tns:getAllBooksResponse&gt;
   &lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;
</codeblock>
                            </entry>
                          </row>
                        </tbody>
                      </tgroup>
                    </table>
                  </note>
                </li>
                <li>ReplyWith: Output Message</li>
                <li>Description: </li>
                <li>
                  Input bindings:
                  <ul outputclass="mappings">
                    <li outputclass="table">
                      <lines outputclass="caption">Mapping table</lines>
                      <table outputclass="data">
                        <tgroup cols="2">
                          <thead>
                            <row>
                              <entry>Target</entry>
                              <entry>Source</entry>
                            </row>
                          </thead>
                          <tbody>
                            <row>
                              <entry>
                                <b>/tns:getAllBooksResponse</b>
                                <b>/parameters</b>
                                <b>/tns1:Books</b>
                                /[FOR-EACH]  $getBooks/Record 
                                <b>/tns1:Book</b>
                                /[IF]  isbn 
                                <b>/tns1:isbn</b>
                              </entry>
                              <entry>isbn</entry>
                            </row>
                            <row>
                              <entry>
                                <b>/tns:getAllBooksResponse</b>
                                <b>/parameters</b>
                                <b>/tns1:Books</b>
                                /[FOR-EACH]  $getBooks/Record 
                                <b>/tns1:Book</b>
                                /[IF]  name 
                                <b>/tns1:name</b>
                              </entry>
                              <entry>name</entry>
                            </row>
                            <row>
                              <entry>
                                <b>/tns:getAllBooksResponse</b>
                                <b>/parameters</b>
                                <b>/tns1:Books</b>
                                /[FOR-EACH]  $getBooks/Record 
                                <b>/tns1:Book</b>
                                /[IF]  description 
                                <b>/tns1:description</b>
                              </entry>
                              <entry>description</entry>
                            </row>
                            <row>
                              <entry>
                                <b>/tns:getAllBooksResponse</b>
                                <b>/parameters</b>
                                <b>/tns1:Books</b>
                                /[FOR-EACH]  $getBooks/Record 
                                <b>/tns1:Book</b>
                                /[IF]  authorName 
                                <b>/tns1:authorName</b>
                              </entry>
                              <entry>authorName</entry>
                            </row>
                            <row>
                              <entry>
                                <b>/tns:getAllBooksResponse</b>
                                <b>/parameters</b>
                                <b>/tns1:Books</b>
                                /[FOR-EACH]  $getBooks/Record 
                                <b>/tns1:Book</b>
                                /[IF]  releaseDate 
                                <b>/tns1:releaseDate</b>
                              </entry>
                              <entry>releaseDate</entry>
                            </row>
                            <row>
                              <entry>
                                <b>/tns:getAllBooksResponse</b>
                                <b>/parameters</b>
                                <b>/tns1:Books</b>
                                /[FOR-EACH]  $getBooks/Record 
                                <b>/tns1:Book</b>
                                /[IF]  vintage 
                                <b>/tns1:vintage</b>
                              </entry>
                              <entry>vintage</entry>
                            </row>
                            <row>
                              <entry>
                                <b>/tns:getAllBooksResponse</b>
                                <b>/parameters</b>
                                <b>/tns1:Books</b>
                                /[FOR-EACH]  $getBooks/Record 
                                <b>/tns1:Book</b>
                                /[IF]  signed 
                                <b>/tns1:signed</b>
                              </entry>
                              <entry>signed</entry>
                            </row>
                            <row>
                              <entry>
                                <b>/tns:getAllBooksResponse</b>
                                <b>/parameters</b>
                                <b>/tns1:Books</b>
                                /[FOR-EACH]  $getBooks/Record 
                                <b>/tns1:Book</b>
                                <b>/tns1:price</b>
                              </entry>
                              <entry>xsd:float(price)</entry>
                            </row>
                          </tbody>
                        </tgroup>
                      </table>
                    </li>
                    <li outputclass="tree">
                      <lines outputclass="caption">Mapping tree</lines>
                      <note othertype="repositoryAnalyticsAdded" type="other">
                        <codeblock>
                          <b>
	  tns:getAllBooksResponse
		 parameters
			tns1:Books
			   xsl:for-each select="$getBooks/Record"
				  tns1:Book
					 xsl:if test="isbn"
						tns1:isbn = </b>
                          isbn
                          <b>
					 xsl:if test="name"
						tns1:name = </b>
                          name
                          <b>
					 xsl:if test="description"
						tns1:description = </b>
                          description
                          <b>
					 xsl:if test="authorName"
						tns1:authorName = </b>
                          authorName
                          <b>
					 xsl:if test="releaseDate"
						tns1:releaseDate = </b>
                          releaseDate
                          <b>
					 xsl:if test="vintage"
						tns1:vintage = </b>
                          vintage
                          <b>
					 xsl:if test="signed"
						tns1:signed = </b>
                          signed
                          <b>
					 tns1:price = </b>
                          xsd:float(price)
                        </codeblock>
                      </note>
                    </li>
                    <li outputclass="raw">
                      <lines outputclass="caption">Source code</lines>
                      <note othertype="repositoryAnalyticsAdded" type="other">
                        <codeblock>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:tns="http://xmlns.example.com/20140929140236" xmlns:tns1="http://www.example.org/Books" xmlns:xsd="http://www.w3.org/2001/XMLSchema" version="2.0"&gt;
   &lt;xsl:param name="getBooks"/&gt;
   &lt;xsl:template name="getAllBooksOut-input" match="/"&gt;
      &lt;tns:getAllBooksResponse&gt;
         &lt;parameters&gt;
            &lt;tns1:Books&gt;
               &lt;xsl:for-each select="$getBooks/Record"&gt;
                  &lt;tns1:Book&gt;
                     &lt;xsl:if test="isbn"&gt;
                        &lt;tns1:isbn&gt;
                           &lt;xsl:value-of select="isbn"/&gt;
                        &lt;/tns1:isbn&gt;
                     &lt;/xsl:if&gt;
                     &lt;xsl:if test="name"&gt;
                        &lt;tns1:name&gt;
                           &lt;xsl:value-of select="name"/&gt;
                        &lt;/tns1:name&gt;
                     &lt;/xsl:if&gt;
                     &lt;xsl:if test="description"&gt;
                        &lt;tns1:description&gt;
                           &lt;xsl:value-of select="description"/&gt;
                        &lt;/tns1:description&gt;
                     &lt;/xsl:if&gt;
                     &lt;xsl:if test="authorName"&gt;
                        &lt;tns1:authorName&gt;
                           &lt;xsl:value-of select="authorName"/&gt;
                        &lt;/tns1:authorName&gt;
                     &lt;/xsl:if&gt;
                     &lt;xsl:if test="releaseDate"&gt;
                        &lt;tns1:releaseDate&gt;
                           &lt;xsl:value-of select="releaseDate"/&gt;
                        &lt;/tns1:releaseDate&gt;
                     &lt;/xsl:if&gt;
                     &lt;xsl:if test="vintage"&gt;
                        &lt;tns1:vintage&gt;
                           &lt;xsl:value-of select="vintage"/&gt;
                        &lt;/tns1:vintage&gt;
                     &lt;/xsl:if&gt;
                     &lt;xsl:if test="signed"&gt;
                        &lt;tns1:signed&gt;
                           &lt;xsl:value-of select="signed"/&gt;
                        &lt;/tns1:signed&gt;
                     &lt;/xsl:if&gt;
                     &lt;tns1:price&gt;
                        &lt;xsl:value-of select="xsd:float(price)"/&gt;
                     &lt;/tns1:price&gt;
                  &lt;/tns1:Book&gt;
               &lt;/xsl:for-each&gt;
            &lt;/tns1:Books&gt;
         &lt;/parameters&gt;
      &lt;/tns:getAllBooksResponse&gt;
   &lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;
</codeblock>
                      </note>
                    </li>
                  </ul>
                </li>
              </ul>
            </p>
          </conbody>
        </concept>
        <concept id="getBookByISBN">
          <title>
            Name:
                
            <b>getBookByISBN</b>
          </title>
          <conbody>
            <section>
              <ul>
                <li>
                  Description:
                            No description
                  <note othertype="repositoryAnalyticsRemoved" type="other">
                    <table outputclass="repositoryAnalyticsRemoved">
                      <tgroup cols="1">
                        <thead>
                          <row>
                            <entry>Mapping</entry>
                          </row>
                        </thead>
                        <tbody>
                          <row>
                            <entry>
                              <codeblock>
                                <b>
	  tns:jdbcQueryActivityInput
		 isbn = </b>
                                $getBookByISBN/parameters/tns1:getBookByISBNRequest/ISBN
                              </codeblock>
                            </entry>
                          </row>
                        </tbody>
                      </tgroup>
                    </table>
                  </note>
                  <note othertype="repositoryAnalyticsRemoved" type="other">
                    <table outputclass="repositoryAnalyticsRemoved">
                      <tgroup cols="1">
                        <thead>
                          <row>
                            <entry>Mapping</entry>
                          </row>
                        </thead>
                        <tbody>
                          <row>
                            <entry>
                              <codeblock>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:tns="http://www.tibco.com/namespaces/tnt/plugins/jdbc+426eab4f-07d7-4abd-9ce4-52a7191b6c86+input" xmlns:tns1="http://xmlns.example.com/20140929140236" version="2.0"&gt;
   &lt;xsl:param name="getBookByISBN"/&gt;
   &lt;xsl:template name="getBookByISBN-input" match="/"&gt;
      &lt;tns:jdbcQueryActivityInput&gt;
         &lt;isbn&gt;
            &lt;xsl:value-of select="$getBookByISBN/parameters/tns1:getBookByISBNRequest/ISBN"/&gt;
         &lt;/isbn&gt;
      &lt;/tns:jdbcQueryActivityInput&gt;
   &lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;
</codeblock>
                            </entry>
                          </row>
                        </tbody>
                      </tgroup>
                    </table>
                  </note>
                </li>
                <li>Type: bw.jdbc.JDBCQuery</li>
                <li>JDBC Shared Resource: jdbcProperty</li>
                <li>Timeout (sec): 10</li>
                <li>Maximum rows: 100</li>
                <li>Statement: SELECT *
  FROM "public"."books"
  WHERE "isbn" = ?

</li>
                <li>
                  Parameters:
                    
                  <p>No parameters</p>
                </li>
                <li>Thread Pool Shared Resource: </li>
                <li>Override Transaction Behavior: false</li>
                <li>Override JDBC Connection: false</li>
                <li>Use Nil: false</li>
                <li>Interpret Empty String As Null: false</li>
                <li>Process In Subsets: false</li>
                <li>Input Variable:
                                getBookByISBN-input</li>
                <li>Output Variable:
                                getBookByISBN1</li>
                <li>
                  Input bindings:
                  <ul outputclass="mappings">
                    <li outputclass="table">
                      <lines outputclass="caption">Mapping table</lines>
                      <table outputclass="data">
                        <tgroup cols="2">
                          <thead>
                            <row>
                              <entry>Target</entry>
                              <entry>Source</entry>
                            </row>
                          </thead>
                          <tbody>
                            <row>
                              <entry>
                                <b>/tns:jdbcQueryActivityInput</b>
                                <b>/isbn</b>
                              </entry>
                              <entry>$getBookByISBN/parameters/tns1:getBookByISBNRequest/ISBN</entry>
                            </row>
                          </tbody>
                        </tgroup>
                      </table>
                    </li>
                    <li outputclass="tree">
                      <lines outputclass="caption">Mapping tree</lines>
                      <note othertype="repositoryAnalyticsAdded" type="other">
                        <codeblock>
                          <b>
	  tns:jdbcQueryActivityInput
		 isbn = </b>
                          $getBookByISBN/parameters/tns1:getBookByISBNRequest/ISBN
                        </codeblock>
                      </note>
                    </li>
                    <li outputclass="raw">
                      <lines outputclass="caption">Source code</lines>
                      <note othertype="repositoryAnalyticsAdded" type="other">
                        <codeblock>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:tns="http://www.tibco.com/namespaces/tnt/plugins/jdbc+426eab4f-07d7-4abd-9ce4-52a7191b6c86+input" xmlns:tns1="http://xmlns.example.com/20140929140236" version="2.0"&gt;
   &lt;xsl:param name="getBookByISBN"/&gt;
   &lt;xsl:template name="getBookByISBN-input" match="/"&gt;
      &lt;tns:jdbcQueryActivityInput&gt;
         &lt;isbn&gt;
            &lt;xsl:value-of select="$getBookByISBN/parameters/tns1:getBookByISBNRequest/ISBN"/&gt;
         &lt;/isbn&gt;
      &lt;/tns:jdbcQueryActivityInput&gt;
   &lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;
</codeblock>
                      </note>
                    </li>
                  </ul>
                </li>
              </ul>
            </section>
          </conbody>
        </concept>
        <concept id="getBookByISBNOut">
          <title>
            Name:
                
            <b>getBookByISBNOut</b>
          </title>
          <conbody>
            <p>
              <ul>
                <li>
                  Service: BooksPersist / operation: getBookByISBN
                  <note othertype="repositoryAnalyticsRemoved" type="other">
                    <table outputclass="repositoryAnalyticsRemoved">
                      <tgroup cols="1">
                        <thead>
                          <row>
                            <entry>Mapping</entry>
                          </row>
                        </thead>
                        <tbody>
                          <row>
                            <entry>
                              <codeblock>
                                <b>
	  tns:getBookByISBNResponse
		 parameters
			xsl:for-each select="$getBookByISBN1/Record"
			   tns1:Book
				  xsl:if test="isbn"
					 tns1:isbn = </b>
                                isbn
                                <b>
				  xsl:if test="name"
					 tns1:name = </b>
                                name
                                <b>
				  xsl:if test="description"
					 tns1:description = </b>
                                description
                                <b>
				  xsl:if test="authorName"
					 tns1:authorName = </b>
                                authorName
                                <b>
				  xsl:if test="releaseDate"
					 tns1:releaseDate = </b>
                                releaseDate
                                <b>
				  xsl:if test="vintage"
					 tns1:vintage = </b>
                                vintage
                                <b>
				  xsl:if test="signed"
					 tns1:signed = </b>
                                signed
                                <b>
				  tns1:price = </b>
                                xsd:float(price)
                              </codeblock>
                            </entry>
                          </row>
                        </tbody>
                      </tgroup>
                    </table>
                  </note>
                  <note othertype="repositoryAnalyticsRemoved" type="other">
                    <table outputclass="repositoryAnalyticsRemoved">
                      <tgroup cols="1">
                        <thead>
                          <row>
                            <entry>Mapping</entry>
                          </row>
                        </thead>
                        <tbody>
                          <row>
                            <entry>
                              <codeblock>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:tns="http://xmlns.example.com/20140929140236" xmlns:tns1="http://www.example.org/Books" xmlns:xsd="http://www.w3.org/2001/XMLSchema" version="2.0"&gt;
   &lt;xsl:param name="getBookByISBN1"/&gt;
   &lt;xsl:template name="getBookByISBNOut-input" match="/"&gt;
      &lt;tns:getBookByISBNResponse&gt;
         &lt;parameters&gt;
            &lt;xsl:for-each select="$getBookByISBN1/Record"&gt;
               &lt;tns1:Book&gt;
                  &lt;xsl:if test="isbn"&gt;
                     &lt;tns1:isbn&gt;
                        &lt;xsl:value-of select="isbn"/&gt;
                     &lt;/tns1:isbn&gt;
                  &lt;/xsl:if&gt;
                  &lt;xsl:if test="name"&gt;
                     &lt;tns1:name&gt;
                        &lt;xsl:value-of select="name"/&gt;
                     &lt;/tns1:name&gt;
                  &lt;/xsl:if&gt;
                  &lt;xsl:if test="description"&gt;
                     &lt;tns1:description&gt;
                        &lt;xsl:value-of select="description"/&gt;
                     &lt;/tns1:description&gt;
                  &lt;/xsl:if&gt;
                  &lt;xsl:if test="authorName"&gt;
                     &lt;tns1:authorName&gt;
                        &lt;xsl:value-of select="authorName"/&gt;
                     &lt;/tns1:authorName&gt;
                  &lt;/xsl:if&gt;
                  &lt;xsl:if test="releaseDate"&gt;
                     &lt;tns1:releaseDate&gt;
                        &lt;xsl:value-of select="releaseDate"/&gt;
                     &lt;/tns1:releaseDate&gt;
                  &lt;/xsl:if&gt;
                  &lt;xsl:if test="vintage"&gt;
                     &lt;tns1:vintage&gt;
                        &lt;xsl:value-of select="vintage"/&gt;
                     &lt;/tns1:vintage&gt;
                  &lt;/xsl:if&gt;
                  &lt;xsl:if test="signed"&gt;
                     &lt;tns1:signed&gt;
                        &lt;xsl:value-of select="signed"/&gt;
                     &lt;/tns1:signed&gt;
                  &lt;/xsl:if&gt;
                  &lt;tns1:price&gt;
                     &lt;xsl:value-of select="xsd:float(price)"/&gt;
                  &lt;/tns1:price&gt;
               &lt;/tns1:Book&gt;
            &lt;/xsl:for-each&gt;
         &lt;/parameters&gt;
      &lt;/tns:getBookByISBNResponse&gt;
   &lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;
</codeblock>
                            </entry>
                          </row>
                        </tbody>
                      </tgroup>
                    </table>
                  </note>
                </li>
                <li>ReplyWith: Output Message</li>
                <li>Description: </li>
                <li>
                  Input bindings:
                  <ul outputclass="mappings">
                    <li outputclass="table">
                      <lines outputclass="caption">Mapping table</lines>
                      <table outputclass="data">
                        <tgroup cols="2">
                          <thead>
                            <row>
                              <entry>Target</entry>
                              <entry>Source</entry>
                            </row>
                          </thead>
                          <tbody>
                            <row>
                              <entry>
                                <b>/tns:getBookByISBNResponse</b>
                                <b>/parameters</b>
                                /[FOR-EACH]  $getBookByISBN1/Record 
                                <b>/tns1:Book</b>
                                /[IF]  isbn 
                                <b>/tns1:isbn</b>
                              </entry>
                              <entry>isbn</entry>
                            </row>
                            <row>
                              <entry>
                                <b>/tns:getBookByISBNResponse</b>
                                <b>/parameters</b>
                                /[FOR-EACH]  $getBookByISBN1/Record 
                                <b>/tns1:Book</b>
                                /[IF]  name 
                                <b>/tns1:name</b>
                              </entry>
                              <entry>name</entry>
                            </row>
                            <row>
                              <entry>
                                <b>/tns:getBookByISBNResponse</b>
                                <b>/parameters</b>
                                /[FOR-EACH]  $getBookByISBN1/Record 
                                <b>/tns1:Book</b>
                                /[IF]  description 
                                <b>/tns1:description</b>
                              </entry>
                              <entry>description</entry>
                            </row>
                            <row>
                              <entry>
                                <b>/tns:getBookByISBNResponse</b>
                                <b>/parameters</b>
                                /[FOR-EACH]  $getBookByISBN1/Record 
                                <b>/tns1:Book</b>
                                /[IF]  authorName 
                                <b>/tns1:authorName</b>
                              </entry>
                              <entry>authorName</entry>
                            </row>
                            <row>
                              <entry>
                                <b>/tns:getBookByISBNResponse</b>
                                <b>/parameters</b>
                                /[FOR-EACH]  $getBookByISBN1/Record 
                                <b>/tns1:Book</b>
                                /[IF]  releaseDate 
                                <b>/tns1:releaseDate</b>
                              </entry>
                              <entry>releaseDate</entry>
                            </row>
                            <row>
                              <entry>
                                <b>/tns:getBookByISBNResponse</b>
                                <b>/parameters</b>
                                /[FOR-EACH]  $getBookByISBN1/Record 
                                <b>/tns1:Book</b>
                                /[IF]  vintage 
                                <b>/tns1:vintage</b>
                              </entry>
                              <entry>vintage</entry>
                            </row>
                            <row>
                              <entry>
                                <b>/tns:getBookByISBNResponse</b>
                                <b>/parameters</b>
                                /[FOR-EACH]  $getBookByISBN1/Record 
                                <b>/tns1:Book</b>
                                /[IF]  signed 
                                <b>/tns1:signed</b>
                              </entry>
                              <entry>signed</entry>
                            </row>
                            <row>
                              <entry>
                                <b>/tns:getBookByISBNResponse</b>
                                <b>/parameters</b>
                                /[FOR-EACH]  $getBookByISBN1/Record 
                                <b>/tns1:Book</b>
                                <b>/tns1:price</b>
                              </entry>
                              <entry>xsd:float(price)</entry>
                            </row>
                          </tbody>
                        </tgroup>
                      </table>
                    </li>
                    <li outputclass="tree">
                      <lines outputclass="caption">Mapping tree</lines>
                      <note othertype="repositoryAnalyticsAdded" type="other">
                        <codeblock>
                          <b>
	  tns:getBookByISBNResponse
		 parameters
			xsl:for-each select="$getBookByISBN1/Record"
			   tns1:Book
				  xsl:if test="isbn"
					 tns1:isbn = </b>
                          isbn
                          <b>
				  xsl:if test="name"
					 tns1:name = </b>
                          name
                          <b>
				  xsl:if test="description"
					 tns1:description = </b>
                          description
                          <b>
				  xsl:if test="authorName"
					 tns1:authorName = </b>
                          authorName
                          <b>
				  xsl:if test="releaseDate"
					 tns1:releaseDate = </b>
                          releaseDate
                          <b>
				  xsl:if test="vintage"
					 tns1:vintage = </b>
                          vintage
                          <b>
				  xsl:if test="signed"
					 tns1:signed = </b>
                          signed
                          <b>
				  tns1:price = </b>
                          xsd:float(price)
                        </codeblock>
                      </note>
                    </li>
                    <li outputclass="raw">
                      <lines outputclass="caption">Source code</lines>
                      <note othertype="repositoryAnalyticsAdded" type="other">
                        <codeblock>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:tns="http://xmlns.example.com/20140929140236" xmlns:tns1="http://www.example.org/Books" xmlns:xsd="http://www.w3.org/2001/XMLSchema" version="2.0"&gt;
   &lt;xsl:param name="getBookByISBN1"/&gt;
   &lt;xsl:template name="getBookByISBNOut-input" match="/"&gt;
      &lt;tns:getBookByISBNResponse&gt;
         &lt;parameters&gt;
            &lt;xsl:for-each select="$getBookByISBN1/Record"&gt;
               &lt;tns1:Book&gt;
                  &lt;xsl:if test="isbn"&gt;
                     &lt;tns1:isbn&gt;
                        &lt;xsl:value-of select="isbn"/&gt;
                     &lt;/tns1:isbn&gt;
                  &lt;/xsl:if&gt;
                  &lt;xsl:if test="name"&gt;
                     &lt;tns1:name&gt;
                        &lt;xsl:value-of select="name"/&gt;
                     &lt;/tns1:name&gt;
                  &lt;/xsl:if&gt;
                  &lt;xsl:if test="description"&gt;
                     &lt;tns1:description&gt;
                        &lt;xsl:value-of select="description"/&gt;
                     &lt;/tns1:description&gt;
                  &lt;/xsl:if&gt;
                  &lt;xsl:if test="authorName"&gt;
                     &lt;tns1:authorName&gt;
                        &lt;xsl:value-of select="authorName"/&gt;
                     &lt;/tns1:authorName&gt;
                  &lt;/xsl:if&gt;
                  &lt;xsl:if test="releaseDate"&gt;
                     &lt;tns1:releaseDate&gt;
                        &lt;xsl:value-of select="releaseDate"/&gt;
                     &lt;/tns1:releaseDate&gt;
                  &lt;/xsl:if&gt;
                  &lt;xsl:if test="vintage"&gt;
                     &lt;tns1:vintage&gt;
                        &lt;xsl:value-of select="vintage"/&gt;
                     &lt;/tns1:vintage&gt;
                  &lt;/xsl:if&gt;
                  &lt;xsl:if test="signed"&gt;
                     &lt;tns1:signed&gt;
                        &lt;xsl:value-of select="signed"/&gt;
                     &lt;/tns1:signed&gt;
                  &lt;/xsl:if&gt;
                  &lt;tns1:price&gt;
                     &lt;xsl:value-of select="xsd:float(price)"/&gt;
                  &lt;/tns1:price&gt;
               &lt;/tns1:Book&gt;
            &lt;/xsl:for-each&gt;
         &lt;/parameters&gt;
      &lt;/tns:getBookByISBNResponse&gt;
   &lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;
</codeblock>
                      </note>
                    </li>
                  </ul>
                </li>
              </ul>
            </p>
          </conbody>
        </concept>
        <concept id="getBooks">
          <title>
            Name:
                
            <b>getBooks</b>
          </title>
          <conbody>
            <section>
              <ul>
                <li>Description:
                            No description</li>
                <li>Type: bw.jdbc.JDBCQuery</li>
                <li>JDBC Shared Resource: jdbcProperty</li>
                <li>Timeout (sec): 10</li>
                <li>Maximum rows: 100</li>
                <li>Statement: SELECT *
  FROM "public"."books"
</li>
                <li>
                  Parameters:
                    
                  <p>No parameters</p>
                </li>
                <li>Thread Pool Shared Resource: </li>
                <li>Override Transaction Behavior: false</li>
                <li>Override JDBC Connection: false</li>
                <li>Use Nil: false</li>
                <li>Interpret Empty String As Null: false</li>
                <li>Process In Subsets: false</li>
                <li>Input Variable:
                                getBooks-input</li>
                <li>Output Variable:
                                getBooks</li>
                <li>Input bindings:
                                    Incomplete mapping
                                </li>
              </ul>
            </section>
          </conbody>
        </concept>
        <concept id="getRecentBooks">
          <title>
            Name:
                
            <b>getRecentBooks</b>
          </title>
          <conbody>
            <section>
              <ul>
                <li>Description:
                            No description</li>
                <li>Type: bw.jdbc.JDBCQuery</li>
                <li>JDBC Shared Resource: jdbcProperty</li>
                <li>Timeout (sec): 10</li>
                <li>Maximum rows: 100</li>
                <li>Statement: SELECT   * 
FROM 
  "public"."books"
ORDER BY
  "books"."releaseDate" DESC
LIMIT 2

</li>
                <li>
                  Parameters:
                    
                  <p>No parameters</p>
                </li>
                <li>Thread Pool Shared Resource: </li>
                <li>Override Transaction Behavior: false</li>
                <li>Override JDBC Connection: false</li>
                <li>Use Nil: false</li>
                <li>Interpret Empty String As Null: false</li>
                <li>Process In Subsets: false</li>
                <li>Input Variable:
                                getRecentBooks-input</li>
                <li>Output Variable:
                                getRecentBooks1</li>
                <li>Input bindings:
                                    Incomplete mapping
                                </li>
              </ul>
            </section>
          </conbody>
        </concept>
        <concept id="getRecentBooksOut">
          <title>
            Name:
                
            <b>getRecentBooksOut</b>
          </title>
          <conbody>
            <p>
              <ul>
                <li>
                  Service: BooksPersist / operation: getRecentBooks
                  <note othertype="repositoryAnalyticsRemoved" type="other">
                    <table outputclass="repositoryAnalyticsRemoved">
                      <tgroup cols="1">
                        <thead>
                          <row>
                            <entry>Mapping</entry>
                          </row>
                        </thead>
                        <tbody>
                          <row>
                            <entry>
                              <codeblock>
                                <b>
	  tns:getRecentBooksResponse
		 parameters
			tns1:Books
			   tns1:Book
				  xsl:if test="$getRecentBooks1/Record[1]/isbn"
					 tns1:isbn = </b>
                                $getRecentBooks1/Record[1]/isbn
                                <b>
				  xsl:if test="$getRecentBooks1/Record[1]/name"
					 tns1:name = </b>
                                $getRecentBooks1/Record[1]/name
                                <b>
				  xsl:if test="$getRecentBooks1/Record[1]/description"
					 tns1:description = </b>
                                $getRecentBooks1/Record[1]/description
                                <b>
				  xsl:if test="$getRecentBooks1/Record[1]/authorName"
					 tns1:authorName = </b>
                                $getRecentBooks1/Record[1]/authorName
                                <b>
				  xsl:if test="$getRecentBooks1/Record[1]/releaseDate"
					 tns1:releaseDate = </b>
                                $getRecentBooks1/Record[1]/releaseDate
                                <b>
				  xsl:if test="$getRecentBooks1/Record[1]/vintage"
					 tns1:vintage = </b>
                                $getRecentBooks1/Record[1]/vintage
                                <b>
				  xsl:if test="$getRecentBooks1/Record[1]/signed"
					 tns1:signed = </b>
                                $getRecentBooks1/Record[1]/signed
                                <b>
				  tns1:price = </b>
                                xsd:float($getRecentBooks1/Record[1]/price)
                              </codeblock>
                            </entry>
                          </row>
                        </tbody>
                      </tgroup>
                    </table>
                  </note>
                  <note othertype="repositoryAnalyticsRemoved" type="other">
                    <table outputclass="repositoryAnalyticsRemoved">
                      <tgroup cols="1">
                        <thead>
                          <row>
                            <entry>Mapping</entry>
                          </row>
                        </thead>
                        <tbody>
                          <row>
                            <entry>
                              <codeblock>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:tns="http://xmlns.example.com/20140929140236" xmlns:tns1="http://www.example.org/Books" xmlns:xsd="http://www.w3.org/2001/XMLSchema" version="2.0"&gt;
   &lt;xsl:param name="getRecentBooks1"/&gt;
   &lt;xsl:template name="getRecentBooksOut-input" match="/"&gt;
      &lt;tns:getRecentBooksResponse&gt;
         &lt;parameters&gt;
            &lt;tns1:Books&gt;
               &lt;tns1:Book&gt;
                  &lt;xsl:if test="$getRecentBooks1/Record[1]/isbn"&gt;
                     &lt;tns1:isbn&gt;
                        &lt;xsl:value-of select="$getRecentBooks1/Record[1]/isbn"/&gt;
                     &lt;/tns1:isbn&gt;
                  &lt;/xsl:if&gt;
                  &lt;xsl:if test="$getRecentBooks1/Record[1]/name"&gt;
                     &lt;tns1:name&gt;
                        &lt;xsl:value-of select="$getRecentBooks1/Record[1]/name"/&gt;
                     &lt;/tns1:name&gt;
                  &lt;/xsl:if&gt;
                  &lt;xsl:if test="$getRecentBooks1/Record[1]/description"&gt;
                     &lt;tns1:description&gt;
                        &lt;xsl:value-of select="$getRecentBooks1/Record[1]/description"/&gt;
                     &lt;/tns1:description&gt;
                  &lt;/xsl:if&gt;
                  &lt;xsl:if test="$getRecentBooks1/Record[1]/authorName"&gt;
                     &lt;tns1:authorName&gt;
                        &lt;xsl:value-of select="$getRecentBooks1/Record[1]/authorName"/&gt;
                     &lt;/tns1:authorName&gt;
                  &lt;/xsl:if&gt;
                  &lt;xsl:if test="$getRecentBooks1/Record[1]/releaseDate"&gt;
                     &lt;tns1:releaseDate&gt;
                        &lt;xsl:value-of select="$getRecentBooks1/Record[1]/releaseDate"/&gt;
                     &lt;/tns1:releaseDate&gt;
                  &lt;/xsl:if&gt;
                  &lt;xsl:if test="$getRecentBooks1/Record[1]/vintage"&gt;
                     &lt;tns1:vintage&gt;
                        &lt;xsl:value-of select="$getRecentBooks1/Record[1]/vintage"/&gt;
                     &lt;/tns1:vintage&gt;
                  &lt;/xsl:if&gt;
                  &lt;xsl:if test="$getRecentBooks1/Record[1]/signed"&gt;
                     &lt;tns1:signed&gt;
                        &lt;xsl:value-of select="$getRecentBooks1/Record[1]/signed"/&gt;
                     &lt;/tns1:signed&gt;
                  &lt;/xsl:if&gt;
                  &lt;tns1:price&gt;
                     &lt;xsl:value-of select="xsd:float($getRecentBooks1/Record[1]/price)"/&gt;
                  &lt;/tns1:price&gt;
               &lt;/tns1:Book&gt;
            &lt;/tns1:Books&gt;
         &lt;/parameters&gt;
      &lt;/tns:getRecentBooksResponse&gt;
   &lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;
</codeblock>
                            </entry>
                          </row>
                        </tbody>
                      </tgroup>
                    </table>
                  </note>
                </li>
                <li>ReplyWith: Output Message</li>
                <li>Description: </li>
                <li>
                  Input bindings:
                  <ul outputclass="mappings">
                    <li outputclass="table">
                      <lines outputclass="caption">Mapping table</lines>
                      <table outputclass="data">
                        <tgroup cols="2">
                          <thead>
                            <row>
                              <entry>Target</entry>
                              <entry>Source</entry>
                            </row>
                          </thead>
                          <tbody>
                            <row>
                              <entry>
                                <b>/tns:getRecentBooksResponse</b>
                                <b>/parameters</b>
                                <b>/tns1:Books</b>
                                <b>/tns1:Book</b>
                                /[IF]  $getRecentBooks1/Record[1]/isbn 
                                <b>/tns1:isbn</b>
                              </entry>
                              <entry>$getRecentBooks1/Record[1]/isbn</entry>
                            </row>
                            <row>
                              <entry>
                                <b>/tns:getRecentBooksResponse</b>
                                <b>/parameters</b>
                                <b>/tns1:Books</b>
                                <b>/tns1:Book</b>
                                /[IF]  $getRecentBooks1/Record[1]/name 
                                <b>/tns1:name</b>
                              </entry>
                              <entry>$getRecentBooks1/Record[1]/name</entry>
                            </row>
                            <row>
                              <entry>
                                <b>/tns:getRecentBooksResponse</b>
                                <b>/parameters</b>
                                <b>/tns1:Books</b>
                                <b>/tns1:Book</b>
                                /[IF]  $getRecentBooks1/Record[1]/description 
                                <b>/tns1:description</b>
                              </entry>
                              <entry>$getRecentBooks1/Record[1]/description</entry>
                            </row>
                            <row>
                              <entry>
                                <b>/tns:getRecentBooksResponse</b>
                                <b>/parameters</b>
                                <b>/tns1:Books</b>
                                <b>/tns1:Book</b>
                                /[IF]  $getRecentBooks1/Record[1]/authorName 
                                <b>/tns1:authorName</b>
                              </entry>
                              <entry>$getRecentBooks1/Record[1]/authorName</entry>
                            </row>
                            <row>
                              <entry>
                                <b>/tns:getRecentBooksResponse</b>
                                <b>/parameters</b>
                                <b>/tns1:Books</b>
                                <b>/tns1:Book</b>
                                /[IF]  $getRecentBooks1/Record[1]/releaseDate 
                                <b>/tns1:releaseDate</b>
                              </entry>
                              <entry>$getRecentBooks1/Record[1]/releaseDate</entry>
                            </row>
                            <row>
                              <entry>
                                <b>/tns:getRecentBooksResponse</b>
                                <b>/parameters</b>
                                <b>/tns1:Books</b>
                                <b>/tns1:Book</b>
                                /[IF]  $getRecentBooks1/Record[1]/vintage 
                                <b>/tns1:vintage</b>
                              </entry>
                              <entry>$getRecentBooks1/Record[1]/vintage</entry>
                            </row>
                            <row>
                              <entry>
                                <b>/tns:getRecentBooksResponse</b>
                                <b>/parameters</b>
                                <b>/tns1:Books</b>
                                <b>/tns1:Book</b>
                                /[IF]  $getRecentBooks1/Record[1]/signed 
                                <b>/tns1:signed</b>
                              </entry>
                              <entry>$getRecentBooks1/Record[1]/signed</entry>
                            </row>
                            <row>
                              <entry>
                                <b>/tns:getRecentBooksResponse</b>
                                <b>/parameters</b>
                                <b>/tns1:Books</b>
                                <b>/tns1:Book</b>
                                <b>/tns1:price</b>
                              </entry>
                              <entry>xsd:float($getRecentBooks1/Record[1]/price)</entry>
                            </row>
                          </tbody>
                        </tgroup>
                      </table>
                    </li>
                    <li outputclass="tree">
                      <lines outputclass="caption">Mapping tree</lines>
                      <note othertype="repositoryAnalyticsAdded" type="other">
                        <codeblock>
                          <b>
	  tns:getRecentBooksResponse
		 parameters
			tns1:Books
			   tns1:Book
				  xsl:if test="$getRecentBooks1/Record[1]/isbn"
					 tns1:isbn = </b>
                          $getRecentBooks1/Record[1]/isbn
                          <b>
				  xsl:if test="$getRecentBooks1/Record[1]/name"
					 tns1:name = </b>
                          $getRecentBooks1/Record[1]/name
                          <b>
				  xsl:if test="$getRecentBooks1/Record[1]/description"
					 tns1:description = </b>
                          $getRecentBooks1/Record[1]/description
                          <b>
				  xsl:if test="$getRecentBooks1/Record[1]/authorName"
					 tns1:authorName = </b>
                          $getRecentBooks1/Record[1]/authorName
                          <b>
				  xsl:if test="$getRecentBooks1/Record[1]/releaseDate"
					 tns1:releaseDate = </b>
                          $getRecentBooks1/Record[1]/releaseDate
                          <b>
				  xsl:if test="$getRecentBooks1/Record[1]/vintage"
					 tns1:vintage = </b>
                          $getRecentBooks1/Record[1]/vintage
                          <b>
				  xsl:if test="$getRecentBooks1/Record[1]/signed"
					 tns1:signed = </b>
                          $getRecentBooks1/Record[1]/signed
                          <b>
				  tns1:price = </b>
                          xsd:float($getRecentBooks1/Record[1]/price)
                        </codeblock>
                      </note>
                    </li>
                    <li outputclass="raw">
                      <lines outputclass="caption">Source code</lines>
                      <note othertype="repositoryAnalyticsAdded" type="other">
                        <codeblock>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:tns="http://xmlns.example.com/20140929140236" xmlns:tns1="http://www.example.org/Books" xmlns:xsd="http://www.w3.org/2001/XMLSchema" version="2.0"&gt;
   &lt;xsl:param name="getRecentBooks1"/&gt;
   &lt;xsl:template name="getRecentBooksOut-input" match="/"&gt;
      &lt;tns:getRecentBooksResponse&gt;
         &lt;parameters&gt;
            &lt;tns1:Books&gt;
               &lt;tns1:Book&gt;
                  &lt;xsl:if test="$getRecentBooks1/Record[1]/isbn"&gt;
                     &lt;tns1:isbn&gt;
                        &lt;xsl:value-of select="$getRecentBooks1/Record[1]/isbn"/&gt;
                     &lt;/tns1:isbn&gt;
                  &lt;/xsl:if&gt;
                  &lt;xsl:if test="$getRecentBooks1/Record[1]/name"&gt;
                     &lt;tns1:name&gt;
                        &lt;xsl:value-of select="$getRecentBooks1/Record[1]/name"/&gt;
                     &lt;/tns1:name&gt;
                  &lt;/xsl:if&gt;
                  &lt;xsl:if test="$getRecentBooks1/Record[1]/description"&gt;
                     &lt;tns1:description&gt;
                        &lt;xsl:value-of select="$getRecentBooks1/Record[1]/description"/&gt;
                     &lt;/tns1:description&gt;
                  &lt;/xsl:if&gt;
                  &lt;xsl:if test="$getRecentBooks1/Record[1]/authorName"&gt;
                     &lt;tns1:authorName&gt;
                        &lt;xsl:value-of select="$getRecentBooks1/Record[1]/authorName"/&gt;
                     &lt;/tns1:authorName&gt;
                  &lt;/xsl:if&gt;
                  &lt;xsl:if test="$getRecentBooks1/Record[1]/releaseDate"&gt;
                     &lt;tns1:releaseDate&gt;
                        &lt;xsl:value-of select="$getRecentBooks1/Record[1]/releaseDate"/&gt;
                     &lt;/tns1:releaseDate&gt;
                  &lt;/xsl:if&gt;
                  &lt;xsl:if test="$getRecentBooks1/Record[1]/vintage"&gt;
                     &lt;tns1:vintage&gt;
                        &lt;xsl:value-of select="$getRecentBooks1/Record[1]/vintage"/&gt;
                     &lt;/tns1:vintage&gt;
                  &lt;/xsl:if&gt;
                  &lt;xsl:if test="$getRecentBooks1/Record[1]/signed"&gt;
                     &lt;tns1:signed&gt;
                        &lt;xsl:value-of select="$getRecentBooks1/Record[1]/signed"/&gt;
                     &lt;/tns1:signed&gt;
                  &lt;/xsl:if&gt;
                  &lt;tns1:price&gt;
                     &lt;xsl:value-of select="xsd:float($getRecentBooks1/Record[1]/price)"/&gt;
                  &lt;/tns1:price&gt;
               &lt;/tns1:Book&gt;
            &lt;/tns1:Books&gt;
         &lt;/parameters&gt;
      &lt;/tns:getRecentBooksResponse&gt;
   &lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;
</codeblock>
                      </note>
                    </li>
                  </ul>
                </li>
              </ul>
            </p>
          </conbody>
        </concept>
        <concept id="JDBCQuery">
          <title>
            Name:
                
            <b>JDBCQuery</b>
          </title>
          <conbody>
            <section>
              <ul>
                <li>
                  Description:
                            No description
                  <note othertype="repositoryAnalyticsRemoved" type="other">
                    <table outputclass="repositoryAnalyticsRemoved">
                      <tgroup cols="1">
                        <thead>
                          <row>
                            <entry>Mapping</entry>
                          </row>
                        </thead>
                        <tbody>
                          <row>
                            <entry>
                              <codeblock>
                                <b>
	  tns:jdbcQueryActivityInput
		 isbn
			xsl:choose
			   xsl:when test="exists($updateBook/parameters/tns1:Book/tns1:isbn)" = </b>
                                $updateBook/parameters/tns1:Book/tns1:isbn
                              </codeblock>
                            </entry>
                          </row>
                        </tbody>
                      </tgroup>
                    </table>
                  </note>
                  <note othertype="repositoryAnalyticsRemoved" type="other">
                    <table outputclass="repositoryAnalyticsRemoved">
                      <tgroup cols="1">
                        <thead>
                          <row>
                            <entry>Mapping</entry>
                          </row>
                        </thead>
                        <tbody>
                          <row>
                            <entry>
                              <codeblock>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:tns="http://www.tibco.com/namespaces/tnt/plugins/jdbc+d7bef9be-32ee-440d-becf-03121e4c20cb+input" xmlns:tns1="http://www.example.org/Books" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="2.0"&gt;
   &lt;xsl:param name="updateBook"/&gt;
   &lt;xsl:template name="JDBCQuery-input" match="/"&gt;
      &lt;tns:jdbcQueryActivityInput&gt;
         &lt;isbn&gt;
            &lt;xsl:choose&gt;
               &lt;xsl:when test="exists($updateBook/parameters/tns1:Book/tns1:isbn)"&gt;
                  &lt;xsl:value-of select="$updateBook/parameters/tns1:Book/tns1:isbn"/&gt;
               &lt;/xsl:when&gt;
               &lt;xsl:otherwise&gt;
                  &lt;xsl:attribute name="xsi:nil"&gt;true&lt;/xsl:attribute&gt;
               &lt;/xsl:otherwise&gt;
            &lt;/xsl:choose&gt;
         &lt;/isbn&gt;
      &lt;/tns:jdbcQueryActivityInput&gt;
   &lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;
</codeblock>
                            </entry>
                          </row>
                        </tbody>
                      </tgroup>
                    </table>
                  </note>
                </li>
                <li>Type: bw.jdbc.JDBCQuery</li>
                <li>JDBC Shared Resource: jdbcProperty</li>
                <li>Timeout (sec): 10</li>
                <li>Maximum rows: 100</li>
                <li>Statement: SELECT *
  FROM "public"."books"
  WHERE "isbn" = ?
</li>
                <li>
                  Parameters:
                    
                  <p>No parameters</p>
                </li>
                <li>Thread Pool Shared Resource: </li>
                <li>Override Transaction Behavior: false</li>
                <li>Override JDBC Connection: false</li>
                <li>Use Nil: false</li>
                <li>Interpret Empty String As Null: false</li>
                <li>Process In Subsets: false</li>
                <li>Input Variable:
                                JDBCQuery-input</li>
                <li>Output Variable:
                                JDBCQuery</li>
                <li>
                  Input bindings:
                  <ul outputclass="mappings">
                    <li outputclass="table">
                      <lines outputclass="caption">Mapping table</lines>
                      <table outputclass="data">
                        <tgroup cols="2">
                          <thead>
                            <row>
                              <entry>Target</entry>
                              <entry>Source</entry>
                            </row>
                          </thead>
                          <tbody>
                            <row>
                              <entry>
                                <b>/tns:jdbcQueryActivityInput</b>
                                <b>/isbn</b>
                                /[CHOOSE]/[WHEN]  exists($updateBook/parameters/tns1:Book/tns1:isbn) 
                              </entry>
                              <entry>$updateBook/parameters/tns1:Book/tns1:isbn</entry>
                            </row>
                          </tbody>
                        </tgroup>
                      </table>
                    </li>
                    <li outputclass="tree">
                      <lines outputclass="caption">Mapping tree</lines>
                      <note othertype="repositoryAnalyticsAdded" type="other">
                        <codeblock>
                          <b>
	  tns:jdbcQueryActivityInput
		 isbn
			xsl:choose
			   xsl:when test="exists($updateBook/parameters/tns1:Book/tns1:isbn)" = </b>
                          $updateBook/parameters/tns1:Book/tns1:isbn
                        </codeblock>
                      </note>
                    </li>
                    <li outputclass="raw">
                      <lines outputclass="caption">Source code</lines>
                      <note othertype="repositoryAnalyticsAdded" type="other">
                        <codeblock>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:tns="http://www.tibco.com/namespaces/tnt/plugins/jdbc+d7bef9be-32ee-440d-becf-03121e4c20cb+input" xmlns:tns1="http://www.example.org/Books" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="2.0"&gt;
   &lt;xsl:param name="updateBook"/&gt;
   &lt;xsl:template name="JDBCQuery-input" match="/"&gt;
      &lt;tns:jdbcQueryActivityInput&gt;
         &lt;isbn&gt;
            &lt;xsl:choose&gt;
               &lt;xsl:when test="exists($updateBook/parameters/tns1:Book/tns1:isbn)"&gt;
                  &lt;xsl:value-of select="$updateBook/parameters/tns1:Book/tns1:isbn"/&gt;
               &lt;/xsl:when&gt;
               &lt;xsl:otherwise&gt;
                  &lt;xsl:attribute name="xsi:nil"&gt;true&lt;/xsl:attribute&gt;
               &lt;/xsl:otherwise&gt;
            &lt;/xsl:choose&gt;
         &lt;/isbn&gt;
      &lt;/tns:jdbcQueryActivityInput&gt;
   &lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;
</codeblock>
                      </note>
                    </li>
                  </ul>
                </li>
              </ul>
            </section>
          </conbody>
        </concept>
        <concept id="updateBook">
          <title>
            Name:
                
            <b>updateBook</b>
          </title>
          <conbody>
            <section>
              <ul>
                <li>
                  Description:
                            No description
                  <note othertype="repositoryAnalyticsRemoved" type="other">
                    <table outputclass="repositoryAnalyticsRemoved">
                      <tgroup cols="1">
                        <thead>
                          <row>
                            <entry>Mapping</entry>
                          </row>
                        </thead>
                        <tbody>
                          <row>
                            <entry>
                              <codeblock>
                                <b>
	  tns:jdbcUpdateActivityInput
		 name
			xsl:choose
			   xsl:when test="exists(if(empty($updateBook/parameters/tns1:Book/tns1:name)) then $JDBCQuery/Record[1]/name else $updateBook/parameters/tns1:Book/tns1:name)" = </b>
                                if(empty($updateBook/parameters/tns1:Book/tns1:name)) then $JDBCQuery/Record[1]/name else $updateBook/parameters/tns1:Book/tns1:name
                                <b>
			   xsl:otherwise
				  xsl:attribute name="xsi:nil"
		 description
			xsl:choose
			   xsl:when test="exists(if(empty($updateBook/parameters/tns1:Book/tns1:description)) then $JDBCQuery/Record[1]/description else $updateBook/parameters/tns1:Book/tns1:description)" = </b>
                                if(empty($updateBook/parameters/tns1:Book/tns1:description)) then $JDBCQuery/Record[1]/description else $updateBook/parameters/tns1:Book/tns1:description
                                <b>
			   xsl:otherwise
				  xsl:attribute name="xsi:nil"
		 authorName
			xsl:choose
			   xsl:when test="exists(if(empty($updateBook/parameters/tns1:Book/tns1:authorName)) then $JDBCQuery/Record[1]/authorName else $updateBook/parameters/tns1:Book/tns1:authorName)" = </b>
                                if(empty($updateBook/parameters/tns1:Book/tns1:authorName)) then $JDBCQuery/Record[1]/authorName else $updateBook/parameters/tns1:Book/tns1:authorName
                                <b>
			   xsl:otherwise
				  xsl:attribute name="xsi:nil"
		 releaseDate
			xsl:choose
			   xsl:when test="exists(if(empty($updateBook/parameters/tns1:Book/tns1:releaseDate)) then $JDBCQuery/Record[1]/releaseDate else $updateBook/parameters/tns1:Book/tns1:releaseDate)" = </b>
                                if(empty($updateBook/parameters/tns1:Book/tns1:releaseDate)) then $JDBCQuery/Record[1]/releaseDate else $updateBook/parameters/tns1:Book/tns1:releaseDate
                                <b>
			   xsl:otherwise
				  xsl:attribute name="xsi:nil"
		 vintage
			xsl:choose
			   xsl:when test="exists(if(empty($updateBook/parameters/tns1:Book/tns1:vintage)) then $JDBCQuery/Record[1]/vintage else $updateBook/parameters/tns1:Book/tns1:vintage)" = </b>
                                if(empty($updateBook/parameters/tns1:Book/tns1:vintage)) then $JDBCQuery/Record[1]/vintage else $updateBook/parameters/tns1:Book/tns1:vintage
                                <b>
			   xsl:otherwise
				  xsl:attribute name="xsi:nil"
		 signed
			xsl:choose
			   xsl:when test="exists(if(empty($updateBook/parameters/tns1:Book/tns1:signed)) then $JDBCQuery/Record[1]/signed else $updateBook/parameters/tns1:Book/tns1:signed)" = </b>
                                if(empty($updateBook/parameters/tns1:Book/tns1:signed)) then $JDBCQuery/Record[1]/signed else $updateBook/parameters/tns1:Book/tns1:signed
                                <b>
			   xsl:otherwise
				  xsl:attribute name="xsi:nil"
		 price = </b>
                                xsd:double(if(empty($updateBook/parameters/tns1:Book/tns1:price)) then $JDBCQuery/Record[1]/price	else $updateBook/parameters/tns1:Book/tns1:price)
                                <b>
		 isbn
			xsl:choose
			   xsl:when test="exists($updateBook/parameters/tns1:Book/tns1:isbn)" = </b>
                                $updateBook/parameters/tns1:Book/tns1:isbn
                              </codeblock>
                            </entry>
                          </row>
                        </tbody>
                      </tgroup>
                    </table>
                  </note>
                  <note othertype="repositoryAnalyticsRemoved" type="other">
                    <table outputclass="repositoryAnalyticsRemoved">
                      <tgroup cols="1">
                        <thead>
                          <row>
                            <entry>Mapping</entry>
                          </row>
                        </thead>
                        <tbody>
                          <row>
                            <entry>
                              <codeblock>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:tns="http://www.tibco.com/namespaces/tnt/plugins/jdbc+a3a36799-77f4-4471-9d52-b5927db93771+input" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tns1="http://www.example.org/Books" xmlns:xsd="http://www.w3.org/2001/XMLSchema" version="2.0"&gt;
   &lt;xsl:param name="updateBook"/&gt;
   &lt;xsl:param name="JDBCQuery"/&gt;
   &lt;xsl:template name="updateBook-input" match="/"&gt;
      &lt;tns:jdbcUpdateActivityInput&gt;
         &lt;name&gt;
            &lt;xsl:choose&gt;
               &lt;xsl:when test="exists(if(empty($updateBook/parameters/tns1:Book/tns1:name)) then $JDBCQuery/Record[1]/name else $updateBook/parameters/tns1:Book/tns1:name)"&gt;
                  &lt;xsl:value-of select="if(empty($updateBook/parameters/tns1:Book/tns1:name)) then $JDBCQuery/Record[1]/name else $updateBook/parameters/tns1:Book/tns1:name"/&gt;
               &lt;/xsl:when&gt;
               &lt;xsl:otherwise&gt;
                  &lt;xsl:attribute name="xsi:nil"&gt;true&lt;/xsl:attribute&gt;
               &lt;/xsl:otherwise&gt;
            &lt;/xsl:choose&gt;
         &lt;/name&gt;
         &lt;description&gt;
            &lt;xsl:choose&gt;
               &lt;xsl:when test="exists(if(empty($updateBook/parameters/tns1:Book/tns1:description)) then $JDBCQuery/Record[1]/description else $updateBook/parameters/tns1:Book/tns1:description)"&gt;
                  &lt;xsl:value-of select="if(empty($updateBook/parameters/tns1:Book/tns1:description)) then $JDBCQuery/Record[1]/description else $updateBook/parameters/tns1:Book/tns1:description"/&gt;
               &lt;/xsl:when&gt;
               &lt;xsl:otherwise&gt;
                  &lt;xsl:attribute name="xsi:nil"&gt;true&lt;/xsl:attribute&gt;
               &lt;/xsl:otherwise&gt;
            &lt;/xsl:choose&gt;
         &lt;/description&gt;
         &lt;authorName&gt;
            &lt;xsl:choose&gt;
               &lt;xsl:when test="exists(if(empty($updateBook/parameters/tns1:Book/tns1:authorName)) then $JDBCQuery/Record[1]/authorName else $updateBook/parameters/tns1:Book/tns1:authorName)"&gt;
                  &lt;xsl:value-of select="if(empty($updateBook/parameters/tns1:Book/tns1:authorName)) then $JDBCQuery/Record[1]/authorName else $updateBook/parameters/tns1:Book/tns1:authorName"/&gt;
               &lt;/xsl:when&gt;
               &lt;xsl:otherwise&gt;
                  &lt;xsl:attribute name="xsi:nil"&gt;true&lt;/xsl:attribute&gt;
               &lt;/xsl:otherwise&gt;
            &lt;/xsl:choose&gt;
         &lt;/authorName&gt;
         &lt;releaseDate&gt;
            &lt;xsl:choose&gt;
               &lt;xsl:when test="exists(if(empty($updateBook/parameters/tns1:Book/tns1:releaseDate)) then $JDBCQuery/Record[1]/releaseDate else $updateBook/parameters/tns1:Book/tns1:releaseDate)"&gt;
                  &lt;xsl:value-of select="if(empty($updateBook/parameters/tns1:Book/tns1:releaseDate)) then $JDBCQuery/Record[1]/releaseDate else $updateBook/parameters/tns1:Book/tns1:releaseDate"/&gt;
               &lt;/xsl:when&gt;
               &lt;xsl:otherwise&gt;
                  &lt;xsl:attribute name="xsi:nil"&gt;true&lt;/xsl:attribute&gt;
               &lt;/xsl:otherwise&gt;
            &lt;/xsl:choose&gt;
         &lt;/releaseDate&gt;
         &lt;vintage&gt;
            &lt;xsl:choose&gt;
               &lt;xsl:when test="exists(if(empty($updateBook/parameters/tns1:Book/tns1:vintage)) then $JDBCQuery/Record[1]/vintage else $updateBook/parameters/tns1:Book/tns1:vintage)"&gt;
                  &lt;xsl:value-of select="if(empty($updateBook/parameters/tns1:Book/tns1:vintage)) then $JDBCQuery/Record[1]/vintage else $updateBook/parameters/tns1:Book/tns1:vintage"/&gt;
               &lt;/xsl:when&gt;
               &lt;xsl:otherwise&gt;
                  &lt;xsl:attribute name="xsi:nil"&gt;true&lt;/xsl:attribute&gt;
               &lt;/xsl:otherwise&gt;
            &lt;/xsl:choose&gt;
         &lt;/vintage&gt;
         &lt;signed&gt;
            &lt;xsl:choose&gt;
               &lt;xsl:when test="exists(if(empty($updateBook/parameters/tns1:Book/tns1:signed)) then $JDBCQuery/Record[1]/signed else $updateBook/parameters/tns1:Book/tns1:signed)"&gt;
                  &lt;xsl:value-of select="if(empty($updateBook/parameters/tns1:Book/tns1:signed)) then $JDBCQuery/Record[1]/signed else $updateBook/parameters/tns1:Book/tns1:signed"/&gt;
               &lt;/xsl:when&gt;
               &lt;xsl:otherwise&gt;
                  &lt;xsl:attribute name="xsi:nil"&gt;true&lt;/xsl:attribute&gt;
               &lt;/xsl:otherwise&gt;
            &lt;/xsl:choose&gt;
         &lt;/signed&gt;
         &lt;price&gt;
            &lt;xsl:value-of select="xsd:double(if(empty($updateBook/parameters/tns1:Book/tns1:price)) then $JDBCQuery/Record[1]/price    else $updateBook/parameters/tns1:Book/tns1:price)"/&gt;
         &lt;/price&gt;
         &lt;isbn&gt;
            &lt;xsl:choose&gt;
               &lt;xsl:when test="exists($updateBook/parameters/tns1:Book/tns1:isbn)"&gt;
                  &lt;xsl:value-of select="$updateBook/parameters/tns1:Book/tns1:isbn"/&gt;
               &lt;/xsl:when&gt;
               &lt;xsl:otherwise&gt;
                  &lt;xsl:attribute name="xsi:nil"&gt;true&lt;/xsl:attribute&gt;
               &lt;/xsl:otherwise&gt;
            &lt;/xsl:choose&gt;
         &lt;/isbn&gt;
      &lt;/tns:jdbcUpdateActivityInput&gt;
   &lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;
</codeblock>
                            </entry>
                          </row>
                        </tbody>
                      </tgroup>
                    </table>
                  </note>
                </li>
                <li>Type: bw.jdbc.update</li>
                <li>JDBC Shared Resource: jdbcProperty</li>
                <li>Timeout (sec): 10</li>
                <li>Statement: UPDATE "public"."books"
  SET ("name", "description", "authorName", "releaseDate", "vintage",
    "signed", "price") = (?, ?, ?, ?,
      ?, ?, ?)
  WHERE "isbn" = ?</li>
                <li>
                  Parameters:
                    
                  <p>No parameters</p>
                </li>
                <li>Thread Pool Shared Resource: </li>
                <li>Insert if record doesn't exist: false</li>
                <li>Override Transaction Behavior: false</li>
                <li>Interpret Empty String As Null: false</li>
                <li>Results Use Schema: false</li>
                <li>Batch Update: false</li>
                <li>Input Variable:
                                updateBook-input</li>
                <li>Output Variable:
                                updateBook1</li>
                <li>
                  Input bindings:
                  <ul outputclass="mappings">
                    <li outputclass="table">
                      <lines outputclass="caption">Mapping table</lines>
                      <table outputclass="data">
                        <tgroup cols="2">
                          <thead>
                            <row>
                              <entry>Target</entry>
                              <entry>Source</entry>
                            </row>
                          </thead>
                          <tbody>
                            <row>
                              <entry>
                                <b>/tns:jdbcUpdateActivityInput</b>
                                <b>/name</b>
                                /[CHOOSE]/[WHEN]  exists(if(empty($updateBook/parameters/tns1:Book/tns1:name)) then $JDBCQuery/Record[1]/name else $updateBook/parameters/tns1:Book/tns1:name) 
                              </entry>
                              <entry>if(empty($updateBook/parameters/tns1:Book/tns1:name)) then $JDBCQuery/Record[1]/name else $updateBook/parameters/tns1:Book/tns1:name</entry>
                            </row>
                            <row>
                              <entry>
                                <b>/tns:jdbcUpdateActivityInput</b>
                                <b>/description</b>
                                /[CHOOSE]/[WHEN]  exists(if(empty($updateBook/parameters/tns1:Book/tns1:description)) then $JDBCQuery/Record[1]/description else $updateBook/parameters/tns1:Book/tns1:description) 
                              </entry>
                              <entry>if(empty($updateBook/parameters/tns1:Book/tns1:description)) then $JDBCQuery/Record[1]/description else $updateBook/parameters/tns1:Book/tns1:description</entry>
                            </row>
                            <row>
                              <entry>
                                <b>/tns:jdbcUpdateActivityInput</b>
                                <b>/authorName</b>
                                /[CHOOSE]/[WHEN]  exists(if(empty($updateBook/parameters/tns1:Book/tns1:authorName)) then $JDBCQuery/Record[1]/authorName else $updateBook/parameters/tns1:Book/tns1:authorName) 
                              </entry>
                              <entry>if(empty($updateBook/parameters/tns1:Book/tns1:authorName)) then $JDBCQuery/Record[1]/authorName else $updateBook/parameters/tns1:Book/tns1:authorName</entry>
                            </row>
                            <row>
                              <entry>
                                <b>/tns:jdbcUpdateActivityInput</b>
                                <b>/releaseDate</b>
                                /[CHOOSE]/[WHEN]  exists(if(empty($updateBook/parameters/tns1:Book/tns1:releaseDate)) then $JDBCQuery/Record[1]/releaseDate else $updateBook/parameters/tns1:Book/tns1:releaseDate) 
                              </entry>
                              <entry>if(empty($updateBook/parameters/tns1:Book/tns1:releaseDate)) then $JDBCQuery/Record[1]/releaseDate else $updateBook/parameters/tns1:Book/tns1:releaseDate</entry>
                            </row>
                            <row>
                              <entry>
                                <b>/tns:jdbcUpdateActivityInput</b>
                                <b>/vintage</b>
                                /[CHOOSE]/[WHEN]  exists(if(empty($updateBook/parameters/tns1:Book/tns1:vintage)) then $JDBCQuery/Record[1]/vintage else $updateBook/parameters/tns1:Book/tns1:vintage) 
                              </entry>
                              <entry>if(empty($updateBook/parameters/tns1:Book/tns1:vintage)) then $JDBCQuery/Record[1]/vintage else $updateBook/parameters/tns1:Book/tns1:vintage</entry>
                            </row>
                            <row>
                              <entry>
                                <b>/tns:jdbcUpdateActivityInput</b>
                                <b>/signed</b>
                                /[CHOOSE]/[WHEN]  exists(if(empty($updateBook/parameters/tns1:Book/tns1:signed)) then $JDBCQuery/Record[1]/signed else $updateBook/parameters/tns1:Book/tns1:signed) 
                              </entry>
                              <entry>if(empty($updateBook/parameters/tns1:Book/tns1:signed)) then $JDBCQuery/Record[1]/signed else $updateBook/parameters/tns1:Book/tns1:signed</entry>
                            </row>
                            <row>
                              <entry>
                                <b>/tns:jdbcUpdateActivityInput</b>
                                <b>/price</b>
                              </entry>
                              <entry>xsd:double(if(empty($updateBook/parameters/tns1:Book/tns1:price)) then $JDBCQuery/Record[1]/price    else $updateBook/parameters/tns1:Book/tns1:price)</entry>
                            </row>
                            <row>
                              <entry>
                                <b>/tns:jdbcUpdateActivityInput</b>
                                <b>/isbn</b>
                                /[CHOOSE]/[WHEN]  exists($updateBook/parameters/tns1:Book/tns1:isbn) 
                              </entry>
                              <entry>$updateBook/parameters/tns1:Book/tns1:isbn</entry>
                            </row>
                          </tbody>
                        </tgroup>
                      </table>
                    </li>
                    <li outputclass="tree">
                      <lines outputclass="caption">Mapping tree</lines>
                      <note othertype="repositoryAnalyticsAdded" type="other">
                        <codeblock>
                          <b>
	  tns:jdbcUpdateActivityInput
		 name
			xsl:choose
			   xsl:when test="exists(if(empty($updateBook/parameters/tns1:Book/tns1:name)) then $JDBCQuery/Record[1]/name else $updateBook/parameters/tns1:Book/tns1:name)" = </b>
                          if(empty($updateBook/parameters/tns1:Book/tns1:name)) then $JDBCQuery/Record[1]/name else $updateBook/parameters/tns1:Book/tns1:name
                          <b>
			   xsl:otherwise
				  xsl:attribute name="xsi:nil"
		 description
			xsl:choose
			   xsl:when test="exists(if(empty($updateBook/parameters/tns1:Book/tns1:description)) then $JDBCQuery/Record[1]/description else $updateBook/parameters/tns1:Book/tns1:description)" = </b>
                          if(empty($updateBook/parameters/tns1:Book/tns1:description)) then $JDBCQuery/Record[1]/description else $updateBook/parameters/tns1:Book/tns1:description
                          <b>
			   xsl:otherwise
				  xsl:attribute name="xsi:nil"
		 authorName
			xsl:choose
			   xsl:when test="exists(if(empty($updateBook/parameters/tns1:Book/tns1:authorName)) then $JDBCQuery/Record[1]/authorName else $updateBook/parameters/tns1:Book/tns1:authorName)" = </b>
                          if(empty($updateBook/parameters/tns1:Book/tns1:authorName)) then $JDBCQuery/Record[1]/authorName else $updateBook/parameters/tns1:Book/tns1:authorName
                          <b>
			   xsl:otherwise
				  xsl:attribute name="xsi:nil"
		 releaseDate
			xsl:choose
			   xsl:when test="exists(if(empty($updateBook/parameters/tns1:Book/tns1:releaseDate)) then $JDBCQuery/Record[1]/releaseDate else $updateBook/parameters/tns1:Book/tns1:releaseDate)" = </b>
                          if(empty($updateBook/parameters/tns1:Book/tns1:releaseDate)) then $JDBCQuery/Record[1]/releaseDate else $updateBook/parameters/tns1:Book/tns1:releaseDate
                          <b>
			   xsl:otherwise
				  xsl:attribute name="xsi:nil"
		 vintage
			xsl:choose
			   xsl:when test="exists(if(empty($updateBook/parameters/tns1:Book/tns1:vintage)) then $JDBCQuery/Record[1]/vintage else $updateBook/parameters/tns1:Book/tns1:vintage)" = </b>
                          if(empty($updateBook/parameters/tns1:Book/tns1:vintage)) then $JDBCQuery/Record[1]/vintage else $updateBook/parameters/tns1:Book/tns1:vintage
                          <b>
			   xsl:otherwise
				  xsl:attribute name="xsi:nil"
		 signed
			xsl:choose
			   xsl:when test="exists(if(empty($updateBook/parameters/tns1:Book/tns1:signed)) then $JDBCQuery/Record[1]/signed else $updateBook/parameters/tns1:Book/tns1:signed)" = </b>
                          if(empty($updateBook/parameters/tns1:Book/tns1:signed)) then $JDBCQuery/Record[1]/signed else $updateBook/parameters/tns1:Book/tns1:signed
                          <b>
			   xsl:otherwise
				  xsl:attribute name="xsi:nil"
		 price = </b>
                          xsd:double(if(empty($updateBook/parameters/tns1:Book/tns1:price)) then $JDBCQuery/Record[1]/price	else $updateBook/parameters/tns1:Book/tns1:price)
                          <b>
		 isbn
			xsl:choose
			   xsl:when test="exists($updateBook/parameters/tns1:Book/tns1:isbn)" = </b>
                          $updateBook/parameters/tns1:Book/tns1:isbn
                        </codeblock>
                      </note>
                    </li>
                    <li outputclass="raw">
                      <lines outputclass="caption">Source code</lines>
                      <note othertype="repositoryAnalyticsAdded" type="other">
                        <codeblock>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:tns="http://www.tibco.com/namespaces/tnt/plugins/jdbc+a3a36799-77f4-4471-9d52-b5927db93771+input" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tns1="http://www.example.org/Books" xmlns:xsd="http://www.w3.org/2001/XMLSchema" version="2.0"&gt;
   &lt;xsl:param name="updateBook"/&gt;
   &lt;xsl:param name="JDBCQuery"/&gt;
   &lt;xsl:template name="updateBook-input" match="/"&gt;
      &lt;tns:jdbcUpdateActivityInput&gt;
         &lt;name&gt;
            &lt;xsl:choose&gt;
               &lt;xsl:when test="exists(if(empty($updateBook/parameters/tns1:Book/tns1:name)) then $JDBCQuery/Record[1]/name else $updateBook/parameters/tns1:Book/tns1:name)"&gt;
                  &lt;xsl:value-of select="if(empty($updateBook/parameters/tns1:Book/tns1:name)) then $JDBCQuery/Record[1]/name else $updateBook/parameters/tns1:Book/tns1:name"/&gt;
               &lt;/xsl:when&gt;
               &lt;xsl:otherwise&gt;
                  &lt;xsl:attribute name="xsi:nil"&gt;true&lt;/xsl:attribute&gt;
               &lt;/xsl:otherwise&gt;
            &lt;/xsl:choose&gt;
         &lt;/name&gt;
         &lt;description&gt;
            &lt;xsl:choose&gt;
               &lt;xsl:when test="exists(if(empty($updateBook/parameters/tns1:Book/tns1:description)) then $JDBCQuery/Record[1]/description else $updateBook/parameters/tns1:Book/tns1:description)"&gt;
                  &lt;xsl:value-of select="if(empty($updateBook/parameters/tns1:Book/tns1:description)) then $JDBCQuery/Record[1]/description else $updateBook/parameters/tns1:Book/tns1:description"/&gt;
               &lt;/xsl:when&gt;
               &lt;xsl:otherwise&gt;
                  &lt;xsl:attribute name="xsi:nil"&gt;true&lt;/xsl:attribute&gt;
               &lt;/xsl:otherwise&gt;
            &lt;/xsl:choose&gt;
         &lt;/description&gt;
         &lt;authorName&gt;
            &lt;xsl:choose&gt;
               &lt;xsl:when test="exists(if(empty($updateBook/parameters/tns1:Book/tns1:authorName)) then $JDBCQuery/Record[1]/authorName else $updateBook/parameters/tns1:Book/tns1:authorName)"&gt;
                  &lt;xsl:value-of select="if(empty($updateBook/parameters/tns1:Book/tns1:authorName)) then $JDBCQuery/Record[1]/authorName else $updateBook/parameters/tns1:Book/tns1:authorName"/&gt;
               &lt;/xsl:when&gt;
               &lt;xsl:otherwise&gt;
                  &lt;xsl:attribute name="xsi:nil"&gt;true&lt;/xsl:attribute&gt;
               &lt;/xsl:otherwise&gt;
            &lt;/xsl:choose&gt;
         &lt;/authorName&gt;
         &lt;releaseDate&gt;
            &lt;xsl:choose&gt;
               &lt;xsl:when test="exists(if(empty($updateBook/parameters/tns1:Book/tns1:releaseDate)) then $JDBCQuery/Record[1]/releaseDate else $updateBook/parameters/tns1:Book/tns1:releaseDate)"&gt;
                  &lt;xsl:value-of select="if(empty($updateBook/parameters/tns1:Book/tns1:releaseDate)) then $JDBCQuery/Record[1]/releaseDate else $updateBook/parameters/tns1:Book/tns1:releaseDate"/&gt;
               &lt;/xsl:when&gt;
               &lt;xsl:otherwise&gt;
                  &lt;xsl:attribute name="xsi:nil"&gt;true&lt;/xsl:attribute&gt;
               &lt;/xsl:otherwise&gt;
            &lt;/xsl:choose&gt;
         &lt;/releaseDate&gt;
         &lt;vintage&gt;
            &lt;xsl:choose&gt;
               &lt;xsl:when test="exists(if(empty($updateBook/parameters/tns1:Book/tns1:vintage)) then $JDBCQuery/Record[1]/vintage else $updateBook/parameters/tns1:Book/tns1:vintage)"&gt;
                  &lt;xsl:value-of select="if(empty($updateBook/parameters/tns1:Book/tns1:vintage)) then $JDBCQuery/Record[1]/vintage else $updateBook/parameters/tns1:Book/tns1:vintage"/&gt;
               &lt;/xsl:when&gt;
               &lt;xsl:otherwise&gt;
                  &lt;xsl:attribute name="xsi:nil"&gt;true&lt;/xsl:attribute&gt;
               &lt;/xsl:otherwise&gt;
            &lt;/xsl:choose&gt;
         &lt;/vintage&gt;
         &lt;signed&gt;
            &lt;xsl:choose&gt;
               &lt;xsl:when test="exists(if(empty($updateBook/parameters/tns1:Book/tns1:signed)) then $JDBCQuery/Record[1]/signed else $updateBook/parameters/tns1:Book/tns1:signed)"&gt;
                  &lt;xsl:value-of select="if(empty($updateBook/parameters/tns1:Book/tns1:signed)) then $JDBCQuery/Record[1]/signed else $updateBook/parameters/tns1:Book/tns1:signed"/&gt;
               &lt;/xsl:when&gt;
               &lt;xsl:otherwise&gt;
                  &lt;xsl:attribute name="xsi:nil"&gt;true&lt;/xsl:attribute&gt;
               &lt;/xsl:otherwise&gt;
            &lt;/xsl:choose&gt;
         &lt;/signed&gt;
         &lt;price&gt;
            &lt;xsl:value-of select="xsd:double(if(empty($updateBook/parameters/tns1:Book/tns1:price)) then $JDBCQuery/Record[1]/price    else $updateBook/parameters/tns1:Book/tns1:price)"/&gt;
         &lt;/price&gt;
         &lt;isbn&gt;
            &lt;xsl:choose&gt;
               &lt;xsl:when test="exists($updateBook/parameters/tns1:Book/tns1:isbn)"&gt;
                  &lt;xsl:value-of select="$updateBook/parameters/tns1:Book/tns1:isbn"/&gt;
               &lt;/xsl:when&gt;
               &lt;xsl:otherwise&gt;
                  &lt;xsl:attribute name="xsi:nil"&gt;true&lt;/xsl:attribute&gt;
               &lt;/xsl:otherwise&gt;
            &lt;/xsl:choose&gt;
         &lt;/isbn&gt;
      &lt;/tns:jdbcUpdateActivityInput&gt;
   &lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;
</codeblock>
                      </note>
                    </li>
                  </ul>
                </li>
              </ul>
            </section>
          </conbody>
        </concept>
        <concept id="updateBookOut">
          <title>
            Name:
                
            <b>updateBookOut</b>
          </title>
          <conbody>
            <p>
              <ul>
                <li>
                  Service: BooksPersist / operation: updateBook
                  <note othertype="repositoryAnalyticsRemoved" type="other">
                    <table outputclass="repositoryAnalyticsRemoved">
                      <tgroup cols="1">
                        <thead>
                          <row>
                            <entry>Mapping</entry>
                          </row>
                        </thead>
                        <tbody>
                          <row>
                            <entry>
                              <codeblock>
                                <b> = </b>
                              </codeblock>
                            </entry>
                          </row>
                        </tbody>
                      </tgroup>
                    </table>
                  </note>
                  <note othertype="repositoryAnalyticsRemoved" type="other">
                    <table outputclass="repositoryAnalyticsRemoved">
                      <tgroup cols="1">
                        <thead>
                          <row>
                            <entry>Mapping</entry>
                          </row>
                        </thead>
                        <tbody>
                          <row>
                            <entry>
                              <codeblock>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:tns="http://xmlns.example.com/20140929140236" xmlns:tns1="http://www.example.org/Books" version="2.0"&gt;
   &lt;xsl:param name="updateBook"/&gt;
   &lt;xsl:template name="updateBookOut-input" match="/"&gt;
      &lt;tns:updateBookResponse&gt;
         &lt;parameters&gt;
            &lt;xsl:copy-of select="$updateBook/parameters/tns1:Book"/&gt;
         &lt;/parameters&gt;
      &lt;/tns:updateBookResponse&gt;
   &lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;
</codeblock>
                            </entry>
                          </row>
                        </tbody>
                      </tgroup>
                    </table>
                  </note>
                </li>
                <li>ReplyWith: Output Message</li>
                <li>Description: </li>
                <li>
                  Input bindings:
                  <ul outputclass="mappings">
                    <li outputclass="table">
                      <lines outputclass="caption">Mapping table</lines>
                      <table outputclass="data">
                        <tgroup cols="2">
                          <thead>
                            <row>
                              <entry>Target</entry>
                              <entry>Source</entry>
                            </row>
                          </thead>
                          <tbody>
                            <row>
                              <entry>
                                <b>/tns:updateBookResponse</b>
                                <b>/parameters</b>
                              </entry>
                              <entry>/[COPY-OF]  $updateBook/parameters/tns1:Book </entry>
                            </row>
                          </tbody>
                        </tgroup>
                      </table>
                    </li>
                    <li outputclass="tree">
                      <lines outputclass="caption">Mapping tree</lines>
                      <note othertype="repositoryAnalyticsAdded" type="other">
                        <codeblock>
                          <b> = </b>
                        </codeblock>
                      </note>
                    </li>
                    <li outputclass="raw">
                      <lines outputclass="caption">Source code</lines>
                      <note othertype="repositoryAnalyticsAdded" type="other">
                        <codeblock>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:tns="http://xmlns.example.com/20140929140236" xmlns:tns1="http://www.example.org/Books" version="2.0"&gt;
   &lt;xsl:param name="updateBook"/&gt;
   &lt;xsl:template name="updateBookOut-input" match="/"&gt;
      &lt;tns:updateBookResponse&gt;
         &lt;parameters&gt;
            &lt;xsl:copy-of select="$updateBook/parameters/tns1:Book"/&gt;
         &lt;/parameters&gt;
      &lt;/tns:updateBookResponse&gt;
   &lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;
</codeblock>
                      </note>
                    </li>
                  </ul>
                </li>
              </ul>
            </p>
          </conbody>
        </concept>
      </concept>
      <concept id="References" xml:lang="en-us">
        <title>References:</title>
      </concept>
      <concept id="Transitions" xml:lang="en-us">
        <title>Transitions:</title>
        <conbody>
          <ul id="OnMessageStart_Assign">
            <li>
                                          From:
                            
              <b>OnMessageStart</b>
                                          -To:
                            
              <b>Assign</b>
              <p>
                <ul>
                  <li>
                                        Label:
                                        </li>
                  <li>Type: SUCCESS</li>
                </ul>
              </p>
            </li>
          </ul>
          <ul id="Assign_ForEach">
            <li>
                                          From:
                            
              <b>Assign</b>
                                          -To:
                            
              <b>ForEach</b>
              <p>
                <ul>
                  <li>
                                        Label:
                                        </li>
                  <li>Type: SUCCESS</li>
                </ul>
              </p>
            </li>
          </ul>
          <ul id="ForEach_addBooksOut">
            <li>
                                          From:
                            
              <b>ForEach</b>
                                          -To:
                            
              <b>addBooksOut</b>
              <p>
                <ul>
                  <li>
                                        Label:
                                        </li>
                  <li>Type: SUCCESS</li>
                </ul>
              </p>
            </li>
          </ul>
          <ul id="GroupStart_addBooks">
            <li>
                                          From:
                            
              <b>GroupStart</b>
                                          -To:
                            
              <b>addBooks</b>
              <p>
                <ul>
                  <li>
                                        Label:
                                        </li>
                  <li>Type: SUCCESS</li>
                </ul>
              </p>
            </li>
          </ul>
          <ul id="addBooks_GroupEnd">
            <li>
                                          From:
                            
              <b>addBooks</b>
                                          -To:
                            
              <b>GroupEnd</b>
              <p>
                <ul>
                  <li>
                                        Label:
                                        </li>
                  <li>Type: SUCCESS</li>
                </ul>
              </p>
            </li>
          </ul>
          <ul id="getBooks_getAllBooksOut">
            <li>
                                          From:
                            
              <b>getBooks</b>
                                          -To:
                            
              <b>getAllBooksOut</b>
              <p>
                <ul>
                  <li>
                                        Label:
                                        </li>
                  <li>Type: SUCCESS</li>
                </ul>
              </p>
            </li>
          </ul>
          <ul id="getBookByISBN_getBookByISBNOut">
            <li>
                                          From:
                            
              <b>getBookByISBN</b>
                                          -To:
                            
              <b>getBookByISBNOut</b>
              <p>
                <ul>
                  <li>
                                        Label:
                                        </li>
                  <li>Type: SUCCESS</li>
                </ul>
              </p>
            </li>
          </ul>
          <ul id="updateBook_updateBookOut">
            <li>
                                          From:
                            
              <b>updateBook</b>
                                          -To:
                            
              <b>updateBookOut</b>
              <p>
                <ul>
                  <li>
                                        Label:
                                        </li>
                  <li>Type: SUCCESS</li>
                </ul>
              </p>
            </li>
          </ul>
          <ul id="JDBCQuery_updateBook">
            <li>
                                          From:
                            
              <b>JDBCQuery</b>
                                          -To:
                            
              <b>updateBook</b>
              <p>
                <ul>
                  <li>
                                        Label:
                                        </li>
                  <li>Type: SUCCESS</li>
                </ul>
              </p>
            </li>
          </ul>
          <ul id="deleteBook_deleteBookOut">
            <li>
                                          From:
                            
              <b>deleteBook</b>
                                          -To:
                            
              <b>deleteBookOut</b>
              <p>
                <ul>
                  <li>
                                        Label:
                                        </li>
                  <li>Type: SUCCESS</li>
                </ul>
              </p>
            </li>
          </ul>
          <ul id="getRecentBooks_getRecentBooksOut">
            <li>
                                          From:
                            
              <b>getRecentBooks</b>
                                          -To:
                            
              <b>getRecentBooksOut</b>
              <p>
                <ul>
                  <li>
                                        Label:
                                        </li>
                  <li>Type: SUCCESS</li>
                </ul>
              </p>
            </li>
          </ul>
        </conbody>
      </concept>
    </concept>
  </concept>
</concept>
